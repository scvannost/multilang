%YAML 1.2
---
name: Multilang
file_extensions:
  - mul
first_line_match: (?:^#!\s*multilang)
scope: source.multilang

variables:
  # We support unicode here because Python 3 is the future
  identifier_continue: '[[:alnum:]_]'
  identifier: '\b[[:alpha:]_]{{identifier_continue}}*\b'
  identifier_constant: '\b(?:[\p{Lu}_][\p{Lu}_\d]*)?[\p{Lu}]{2,}[\p{Lu}_\d]*\b'  # require 2 consecutive upper-case letters
  digitpart: (?:\d(?:_?\d)*)
  path: '({{identifier}} *\. *)*{{identifier}}'
  sql_indicator: \s*(?:SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|WITH)\b
  illegal_names: (?:and|as|assert|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|not|or|pass|raise|return|try|while|with|yield)
  format_spec: |-
    (?x:
      (?:.? [<>=^])?     # fill align
      [ +-]?             # sign
      \#?                # alternate form
      # technically, octal and hexadecimal integers are also supported as 'width', but rarely used
      \d*                # width
      ,?                 # thousands separator
      (?:\.\d+)?         # precision
      [bcdeEfFgGnosxX%]? # type
    )
  strftime_spec: '(?:%(?:[aAwdbBGmyYHIpMSfzZjuUVWcxX%]|-[dmHIMSj]))'

  # R
  var: '(?:[a-zA-Z\._][a-zA-Z0-9\._]*|`[^`]+`)'
  id: '[A-Za-z_]\w*'
  
  # bash
  call_token: '\./'
  cmd_boundary: '(?=\s|;|$|>|<)'
  extension: '\.sh'
  bash-identifier: '[[:alpha:]_][[:alnum:]_]*'
  identifier_non_posix: '[^{{metachar}}\d][^{{metachar}}=]*'
  is_command: '(?=\S)'
  is_end_of_interpolation: '\)'
  is_end_of_option: '[^\w$-]|$'
  is_function: '\s*\b(function)\s+|(?=\s*{{identifier_non_posix}}\s*\(\s*\))'
  is_path_component: '(?=[^\s/]*/)'
  is_start_of_arguments: '[`=|&;()<>\s]'
  is_variable: '(?=\s*{{nbc}}(?:[({]{{nbc}}[)}])?{{nbc}}=)'
  keyword_boundary_end: '(?!=)(?=[^\w_-]|$)'

  # A character that, when unquoted, separates words. A metacharacter is a
  # space, tab, newline, or one of the following characters: ‘|’, ‘&’, ‘;’,
  # ‘(’, ‘)’, ‘<’, or ‘>’.
  metachar: '[\s\t\n|&;()<>]'

  nbc: '[^{}()=\s]*' # non bracket characters (and also non-whitespace, parens)
  reset_and: \s*(&&)
  reset_job: \s*(&)
  reset_or: \s*(\|\|)
  reset_pipe: \s*(\|)
  reset_semicolon: \s*(;)(?![;&])
  start_of_option: (?:\s+|^)--?(?=[\w$])
  varassign: '[+\-?]?='


contexts:
  main:
    - match: '(?:(^\s*#!\s*multilang\s*[rR](?:lang)?)(.*)|(?:(^\s*#!)(.*?)([rR](?:lang)?)(\S*)\s*)(?=->))'
      captures:
        1: markup.heading
        2: comment.line
        3: markup.heading
        4: comment.line
        5: markup.heading
        6: comment.line
      push:
        - include: end
        - include: rlang

    - match: '(?:(^\s*#!\s*multilang\s*(?:[pP](?:y(?:thon)?)?)?)$|(?:^(\s*#!)(.*?)([pP](?:y(?:thon)?)?)(\S*)\s*)(?=->))'
      captures:
        1: markup.heading
        2: markup.heading
        3: comment.line
        4: markup.heading
        5: comment.line
      push:
        - include: end
        - include: python
        - match: (\b[a-zA-Z_]+[a-zA-Z0-9_]*\b)
          captures:
            1: markup.heading
    - match: '(?:(^\s*#!\s*multilang\s*[mM](?:at(?:lab)?)?).*|(?:(^\s*#!)(.*?)([mM](?:at(?:lab)?)?)(\S*)\s*)(?=->))'
      captures:
        1: markup.heading
        2: markup.heading
        3: comment.line
        4: markup.heading
        5: comment.line
      push:
        - include: end
        - include: matlab

    - match:  '(?:(^\s*#!\s*multilang\s*[bB](?:ash)?).*|(?:(^\s*#!)(.*?)([bB](?:ash)?)(\S*)\s*)(?=->))'
      captures:
        1: markup.heading
        2: markup.heading
        3: comment.line
        4: markup.heading
        5: comment.line
      push:
        - include: end
        - include: bash

  end:
    - match: '(->)'
      captures:
        1: keyword
    - match: '(?<=->)(?=\s*)'
      push:
        - match: '\s*([a-zA-Z_\.]+)(?!.*\()'
          captures:
            1: markup.heading
        - match: '([a-zA-Z_\.]+)\((.*)\)\s*,?'
          captures:
            1: support.function
            2: markup.heading
        - match: '$'
          pop: true
    - match: (?=^\s*#!)
      pop: true

  matlab:
    - include: function
    - include: constants_override
    - include: brackets
    - include: curlybrackets
    - include: parens
    - include: transpose
    - include: string
    - include: members
    - include: all_matlab_keywords
    - include: comments
    - include: number
    - include: matlab-operators
    - include: variable
    - include: variable_invalid
    - include: not_equal_invalid
    - include: variable_assignment
  members:
    - match: ({{id}})(\.)({{id}})
      captures:
        2: punctuation.accessor.dot.matlab
  all_matlab_keywords:
    - include: matlab_keyword_control
    - include: matlab_keyword_operator
    - include: matlab_keyword_other
    - include: matlab_oop
    - include: matlab_storage_type
    - include: matlab_storage_modifier
    - include: matlab_constant_language
    - include: matlab_variable_function
    - include: matlab_keyword_desktop
    - include: matlab_keyword_mathematics
    - include: matlab_keyword_analysis
    - include: matlab_storage_control
    - include: matlab_support_graphics
    - include: matlab_support_function
    - include: matlab_support_external
    - include: matlab_support_toolbox_aerospace
    - include: matlab_support_toolbox_bioinformatics
    - include: matlab_support_toolbox_communications
    - include: matlab_support_toolbox_control_systems
    - include: matlab_support_toolbox_curve_fitting
    - include: matlab_support_toolbox_data_acquisition
    - include: matlab_support_toolbox_database
    - include: matlab_support_toolbox_datafeed
    - include: matlab_support_toolbox_design
    - include: matlab_support_toolbox_excel_link
    - include: matlab_support_toolbox_filter_design_hdl_coder
    - include: matlab_support_toolbox_financial_derivatives
    - include: matlab_support_toolbox_financial
    - include: matlab_support_toolbox_fixed_income
    - include: matlab_support_toolbox_fixed_point
    - include: matlab_support_toolbox_fuzzy_logic
    - include: matlab_support_toolbox_garch
    - include: matlab_support_toolbox_genetic_algorithms
    - include: matlab_support_toolbox_image_acquisition
    - include: matlab_support_toolbox_image_processing
    - include: matlab_support_toolbox_instrument_control
    - include: matlab_support_toolbox_mapping
    - include: matlab_support_toolbox_model_predictive_control
    - include: matlab_support_toolbox_model_based_calibration
    - include: matlab_support_toolbox_neural_network
    - include: matlab_support_toolbox_opc
    - include: matlab_support_toolbox_optimization
    - include: matlab_support_toolbox_rf
    - include: matlab_support_toolbox_robust_control
    - include: matlab_support_toolbox_signal_processing
    - include: matlab_support_toolbox_spline
    - include: matlab_support_toolbox_statistics
    - include: matlab_support_toolbox_symbolic_math
    - include: matlab_support_toolbox_system_identification
    - include: matlab_support_toolbox_virtual_reality
    - include: matlab_support_toolbox_wavelet
  allofem:
    - include: parens
    - include: curlybrackets
    - include: end_in_parens
    - include: mat-brackets
    - include: transpose
    - include: string
    - include: all_matlab_keywords
    - include: all_matlab_comments
    - include: variable
    - include: variable_invalid
    - include: number
    - include: matlab-operators
    - match: \.\.\.
      scope: punctuation.separator.continuation.matlab
  mat-brackets:
    - match: '\['
      scope: punctuation.section.brackets.begin.matlab
      push:
        - meta_scope: meta.brackets.matlab
        - match: '\]'
          scope: punctuation.section.brackets.end.matlab
          set: transpose_post_parens
        - include: allofem
  constants_override:
    - match: '(^|\;)\s*(ans|i|j|inf|Inf|nan|NaN|eps|end)\s*=[^=]'
      comment: The user is trying to override MATLAB constants and functions.
      scope: meta.inappropriate.matlab
  curlybrackets:
    - match: '\{'
      scope: meta.brackets.curly.matlab
      push:
        - meta_content_scope: meta.brackets.curly.matlab
        - match: '\}'
          scope: meta.brackets.curly.matlab
          pop: true
        - include: allofem
        - include: end_in_parens
  end_in_parens:
    - match: \bend\b
      comment: end as operator symbol
      scope: keyword.operator.symbols.matlab
  escaped_quote:
    - match: "''"
      scope: constant.character.escape.matlab

  # Function
  function:
    - match: '^\s*(function)\b'
      captures:
        1 : keyword.other.matlab
      push:
        - match: \b(\w+)\s+(=)
          captures:
            1: variable.parameter.output.function.matlab
            2: keyword.operator.assignment.matlab
        - match: '\['
          scope: punctuation.section.brackets.matlab
          push:
            - match: \b\w+\b
              scope: variable.parameter.output.function.matlab
            - match: ','
              scope: punctuation.separator.matlab
            - match: '\]'
              scope: punctuation.section.brackets.matlab
              pop: true
        - match: '(=)?\s*\b(\w+)\s*(\()'
          captures:
            1: keyword.operator.assignment.matlab
            2: entity.name.function.matlab
            3: punctuation.section.parens.begin.matlab
          set:
            - meta_scope: meta.function.parameters.matlab
            - match: \b\w+\b
              scope: variable.parameter.input.function.matlab
            - match: ','
              scope: punctuation.separator.matlab
            - match: '\)'
              scope: punctuation.section.parens.end.matlab
              pop: true
        - match: \b(\w+)\s*(?=%|$)
          captures:
            1: entity.name.function.matlab
          pop: true
  # Matlab keywords
  matlab_constant_language:
    - match: \b(ans|eps|false|Inf|inf|intmax|intmin|namelengthmax|NaN|nan|on|off|realmax|realmin|true|i|j|pi)\b
      comment: MATLAB constants
      scope: constant.language.matlab
  matlab_keyword_analysis:
    - match: \b(abs|addevent|addsample|addsampletocollection|addts|angle|conv|conv2|convn|corrcoef|cov|cplxpair|ctranspose|cumtrapz|deconv|del2|delevent|delsample|delsamplefromcollection|detrend|diff|fft|fft2|fftn|fftshift|fftw|filter|filter2|getabstime|getdatasamplesize|getinterpmethod|getqualitydesc|getsampleusingtime|gettimeseriesnames|gettsafteratevent|gettsafterevent|gettsatevent|gettsbeforeatevent|gettsbeforeevent|gettsbetweenevents|gradient|idealfilter|ifft|ifft2|ifftn|ifftshift|iqr|max|mean|median|min|mldivide|mode|mrdivide|removets|resample|setabstime|setinterpmethod|settimeseriesnames|std|synchronize|timeseries|trapz|tscollection|tsdata.event|tsprops|tstool|var)\b
      comment: Data Analysis
      scope: keyword.analysis.matlab
  matlab_keyword_control:
    - match: \b(break|case|catch|continue|else|elseif|end|for|if|otherwise|pause|rethrow|return|start|startat|stop|switch|try|wait|while)\b
      comment: Control keywords
      scope: keyword.control.matlab
  matlab_keyword_desktop:
    - match: \b(addpath|assignin|builddocsearchdb|cd|checkin|checkout|clc|clear|clipboard|cmopts|commandhistory|commandwindow|computer|copyfile|customverctrl|dbclear|dbcont|dbdown|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|debug|demo|diary|dir|doc|docopt|docsearch|dos|echodemo|edit|exit|fileattrib|filebrowser|finish|format|genpath|getenv|grabcode|help|helpbrowser|helpwin|home|hostid|info|keyboard|license|lookfor|ls|matlab|matlabrc|matlabroot|memory|mkdir|mlint|mlintrpt|more|movefile|notebook|openvar|pack|partialpath|path|path2rc|pathdef|pathsep|pathtool|perl|playshow|prefdir|preferences|profile|profsave|publish|pwd|quit|recycle|rehash|restoredefaultpath|rmdir|rmpath|savepath|setenv|startup|support|system|toolboxdir|type|undocheckout|unix|ver|verctrl|verLessThan|version|web|what|whatsnew|which|winqueryreg|workspace)\b|(^\s*!.*$)
      comment: Desktop Tools and Development
      scope: keyword.desktop.matlab
  matlab_keyword_mathematics:
    - match: \b(accumarray|acos|acosd|acosh|acot|acotd|acoth|acsc|acscd|acsch|airy|amd|asec|asecd|asech|asin|asind|asinh|atan|atan2|atand|atanh|balance|besselh|besseli|besselj|besselk|bessely|beta|betainc|betaln|bicg|bicgstab|blkdiag|bsxfun|bvp4c|bvpget|bvpinit|bvpset|bvpxtend|cart2pol|cart2sph|cat|cdf2rdf|ceil|cgs|chol|cholinc|cholupdate|circshift|colamd|colperm|compan|complex|cond|condeig|condest|conj|convhull|convhulln|cos|cosd|cosh|cot|cotd|coth|cross|csc|cscd|csch|cumprod|cumsum|dblquad|dde23|ddeget|ddesd|ddeset|decic|det|deval|diag|disp|display|dmperm|dot|eig|eigs|ellipj|ellipke|erf|erfc|erfcinv|erfcx|erfinv|etree|etreeplot|exp|expint|expm|expm1|eye|factor|factorial|find|fix|flipdim|fliplr|flipud|floor|fminbnd|fminsearch|freqspace|full|funm|fzero|gallery|gamma|gammainc|gammaln|gcd|gmres|gplot|griddata|griddata3|griddatan|gsvd|hadamard|hankel|hess|hilb|horzcat|hypot|idivide|ilu|imag|ind2sub|Inf|inline|interp1|interp1q|interp2|interp3|interpft|interpn|inv|invhilb|ipermute|kron|lcm|ldl|legendre|length|linsolve|linspace|log|log10|log1p|log2|logm|logspace|lscov|lsqnonneg|lsqr|lu|luinc|magic|meshgrid|minres|mkpp|mod|NaN|nchoosek|ndgrid|ndims|nextpow2|nnz|nonzeros|norm|normest|nthroot|null|numel|nzmax|ode113|ode15i|ode15s|ode23|ode23s|ode23t|ode23tb|ode45|odefile|odeget|odeset|odextend|ones|optimget|optimset|ordeig|ordqz|ordschur|orth|pascal|pcg|pchip|pdepe|pdeval|perms|permute|pinv|planerot|pol2cart|poly|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|ppval|primes|prod|psi|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quadl|quadv|qz|rand|randn|randperm|rank|rat|rats|rcond|real|reallog|realpow|realsqrt|rem|repmat|reshape|residue|roots|rosser|rot90|round|rref|rsf2csf|schur|sec|secd|sech|shiftdim|sign|sin|sind|sinh|size|sort|sortrows|spalloc|sparse|spaugment|spconvert|spdiags|speye|spfun|sph2cart|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spy|sqrt|sqrtm|squeeze|ss2tf|sub2ind|subspace|sum|svd|svds|symamd|symbfact|symmlq|symrcm|tan|tand|tanh|toeplitz|trace|treelayout|treeplot|tril|triplequad|triu|unmkpp|unwrap|vander|vectorize|vertcat|wilkinson|zeros)\b
      comment: Mathematics
      scope: keyword.mathematics.matlab
  matlab_keyword_operator:
    - match: \b(all|and|any|bitand|bitcmp|bitget|bitmax|bitor|bitset|bitshift|bitxor|eq|ge|gt|isa|isappdata|iscell|iscellstr|ischar|iscom|isdir|isempty|isequal|isequalwithequalnans|isevent|isfield|isfinite|isfloat|isglobal|ishandle|ishold|isinf|isinteger|isinterface|isjava|iskeyword|isletter|islogical|ismac|ismember|ismethod|isnan|isnumeric|isobject|ispc|ispref|isprime|isprop|isreal|isscalar|issorted|isspace|issparse|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|le|lt|mislocked|or|ne|not|setxor|union|unique|xor)\b
      comment: Operator keywords
      scope: keyword.operator.matlab
  matlab_keyword_other:
    - match: \b(addOptional|addParamValue|addRequired|addtodate|arrayfun|assert|blanks|builtin|calendar|cell|celldisp|cellfun|cellplot|clock|cputime|createCopy|datatipinfo|date|datenum|datestr|datevec|dbmex|deal|deblank|depdir|depfun|echo|eomday|error|etime|eval|evalc|evalin|exist|feval|fieldnames|findstr|func2str|genvarname|getfield|global|inferiorto|inmem|intersect|intwarning|lasterr|lasterror|lastwarn|loadobj|lower|methods|methodsview|mex|mexext|mfilename|mlock|munlock|nargchk|nargoutchk|now|orderfields|parse|pcode|regexp|regexpi|regexprep|regexptranslate|rmfield|run|saveobj|setdiff|setfield|sprintf|sscanf|strcat|strcmp|strcmpi|strfind|strings|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|structfun|strvcat|subsasgn|subsindex|subsref|substruct|superiorto|swapbytes|symvar|tic|timer|timerfind|timerfindall|toc|typecast|upper|warning|weekday|who|whos)\b
      comment: Other keywords
      scope: keyword.other.matlab
  matlab_storage_control:
    - match: \b(addframe|ascii|audioplayer|audiorecorder|aufinfo|auread|auwrite|avifile|aviinfo|aviread|beep|binary|cdfepoch|cdfinfo|cdfread|cdfwrite|csvread|csvwrite|daqread|dlmread|dlmwrite|exifread|feof|ferror|fgetl|fgets|filehandle|filemarker|fileparts|filesep|fitsinfo|fitsread|fopen|fprintf|fread|frewind|fscanf|fseek|ftell|ftp|fullfile|fwrite|gunzip|gzip|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|imfinfo|importdata|imread|imwrite|lin2mu|load|memmapfile|mget|mmfileinfo|movie2avi|mput|mu2lin|multibandread|multibandwrite|open|rename|save|sendmail|sound|soundsc|tar|tempdir|tempname|textread|textscan|todatenum|uiimport|untar|unzip|urlread|urlwrite|wavfinfo|wavplay|wavread|wavrecord|wavwrite|winopen|wk1finfo|wk1read|wk1write|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xslt|zip)\b
      comment: File I/O
      scope: storage.control.matlab
  matlab_storage_modifier:
    - match: \b(base2dec|bin2dec|cast|cell2mat|cell2struct|cellstr|char|dec2base|dec2bin|dec2hex|hex2dec|hex2num|int2str|mat2cell|mat2str|num2cell|native2unicode|num2hex|num2str|persistent|str2double|str2func|str2mat|str2num|struct2cell|unicode2native)\b
      comment: Storage modifiers
      scope: storage.modifier.matlab
  matlab_storage_type:
    - match: \b(class|double|function|functions|input|inputname|inputParser|int16|int32|int64|int8|logical|single|struct|uint16|uint32|uint64|uint8)\b
      comment: Storage types
      scope: storage.type.matlab
  matlab_support_external:
    - match: \b(actxcontrol|actxcontrollist|actxcontrolselect|actxGetRunningServer|actxserver|addproperty|calllib|callSoapService|createClassFromWsdl|createSoapMessage|ddeadv|ddeexec|ddeinit|ddepoke|ddereq|ddeterm|ddeunadv|deleteproperty|enableservice|eventlisteners|events|Execute|GetCharArray|GetFullMatrix|GetVariable|GetWorkspaceData|import|instrcallback|instrfind|instrfindall|interfaces|invoke|javaaddpath|javaArray|javachk|javaclasspath|javaMethod|javaObject|javarmpath|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|loadlibrary|MaximizeCommandWindow|MinimizeCommandWindow|move|parseSoapResponse|PutCharArray|PutFullMatrix|PutWorkspaceData|readasync|record|registerevent|release|send|serial|serialbreak|stopasync|unloadlibrary|unregisterallevents|unregisterevent|usejava)\b
      comment: External Interfaces
      scope: support.external.matlab
  matlab_support_function:
    - match: \b(addpref|align|dialog|errordlg|export2wsdlg|getappdata|getpixelposition|getpref|ginput|guidata|guide|guihandles|helpdlg|inputdlg|inspect|listdlg|listfonts|menu|movegui|msgbox|openfig|printdlg|printpreview|questdlg|rmappdata|rmpref|selectmoveresize|setappdata|setpixelposition|setpref|textwrap|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitoggletool|uitoolbar|uiwait|waitbar|waitfor|waitforbuttonpress|warndlg)\b
      comment: Creating Graphical User Interfaces
      scope: support.function.matlab
  matlab_support_graphics:
    - match: \b(alim|allchild|alpha|alphamap|ancestor|annotation|area|axes|axis|bar|bar3|bar3h|barh|box|brighten|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|caxis|cla|clabel|clf|close|closereq|colorbar|colordef|colormap|colormapeditor|ColorSpec|comet|comet3|compass|coneplot|contour|contour3|contourc|contourf|contourslice|contrast|copyobj|curl|cylinder|daspect|datacursormode|datetick|delaunay|delaunay3|delaunayn|delete|diffuse|divergence|dragrect|drawnow|dsearch|dsearchn|ellipsoid|errorbar|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|feather|figure|figurepalette|fill|fill3|findall|findfigs|findobj|flow|fplot|frame2im|frameedit|gca|gcbf|gcbo|gcf|gco|get|getframe|graymon|grid|gtext|hgexport|hggroup|hgload|hgsave|hgtransform|hidden|hist|histc|hold|hsv2rgb|im2frame|im2java|image|imagesc|imformats|ind2rgb|inpolygon|interpstreamspeed|isocaps|isocolors|isonormals|isosurface|legend|light|lightangle|lighting|line|LineSpec|linkaxes|linkprop|loglog|makehgtform|material|mesh|meshc|meshz|movie|newplot|noanimate|opengl|orient|pan|pareto|patch|pbaspect|pcolor|peaks|pie|pie3|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|polar|polyarea|print|printopt|propedit|propertyeditor|quiver|quiver3|rbbox|rectangle|rectint|reducepatch|reducevolume|refresh|refreshdata|reset|rgb2hsv|rgbplot|ribbon|rose|rotate|rotate3d|saveas|scatter|scatter3|semilogx|semilogy|set|shading|showplottool|shrinkfaces|slice|smooth3|specular|sphere|spinmap|stairs|stem|stem3|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|subplot|subvolume|surf|surf2patch|surface|surfc|surfl|surfnorm|tetramesh|texlabel|text|title|trimesh|triplot|trisurf|tsearch|tsearchn|view|viewmtx|volumebounds|voronoi|voronoin|waterfall|whitebg|xlabel|xlim|ylabel|ylim|zlabel|zlim|zoom)\b
      comment: Graphics
      scope: support.function.graphics.matlab
  matlab_support_toolbox_aerospace:
    - match: \b(wrldmagm|updateNodes|updateCamera|updateBodies|update|show|saveas|rrtheta|rrsigma|rrdelta|removeViewpoint|removeNode|removeBody|read|quatrotate|quatnormalize|quatnorm|quatmultiply|quatmod|quatinv|quatdivide|quatconj|quat2dcm|quat2angle|play|nodeInfo|moveBody|move|mjuliandate|machnumber|load|lla2ecef|leapyear|juliandate|initialize|initIfNeeded|hide|gravitywgs84|geoidegm96|geod2geoc|geocradius|geoc2geod|generatePatches|findstartstoptimes|fganimation|ecef2lla|dpressure|delete|decyear|dcmecef2ned|dcmbody2wind|dcm2quat|dcm2latlon|dcm2angle|dcm2alphabeta|datcomimport|createBody|correctairspeed|convvel|convtemp|convpres|convmass|convlength|convforce|convdensity|convangvel|convangacc|convang|convacc|atmospalt|atmosnrlmsise00|atmosnonstd|atmoslapse|atmosisa|atmoscoesa|atmoscira|angle2quat|angle2dcm|alphabeta|airspeed|addViewpoint|addRoute|addNode|addBody|VirtualRealityAnimation|Viewpoint|Node|Geometry|GenerateRunScript|Camera|Body|Animation)\b
      comment: Matlab aerospace toolbox
      scope: support.function.toolbox.aerospace.matlab
  matlab_support_toolbox_bioinformatics:
    - match: \b(zonebackadj|weights|view|traverse|traceplot|topoorder|swalign|svmtrain|svmsmoset|svmclassify|subtree|sptread|showhmmprof|showalignment|shortestpath|seqwordcount|seqtool|seqshowwords|seqshoworfs|seqreverse|seqrcomplement|seqprofile|seqpdist|seqneighjoin|seqmatch|seqlogo|seqlinkage|seqinsertgaps|seqdotplot|seqdisp|seqconsensus|seqcomplement|seq2regexp|select|scfread|samplealign|rnaplot|rnafold|rnaconvert|rna2dna|rmasummary|rmabackadj|revgeneticcode|restrict|reroot|reorder|redgreencmap|rebasecuts|rankfeatures|randseq|randfeatures|ramachandran|quantilenorm|prune|proteinpropplot|proteinplot|profalign|probesetvalues|probesetplot|probesetlookup|probesetlink|probelibraryinfo|plot|phytreewrite|phytreetool|phytreeread|phytree|pfamhmmread|pdist|pdbwrite|pdbread|pdbdistplot|pam|palindromes|optimalleaforder|oligoprop|nwalign|num2goid|nuc44|ntdensity|nt2int|nt2aa|nmercount|mzxmlread|mzxml2peaks|multialignviewer|multialignread|multialign|msviewer|mssgolay|msresample|msppresample|mspeaks|mspalign|msnorm|mslowess|msheatmap|msdotplot|msbackadj|msalign|molweight|molviewer|minspantree|maxflow|mavolcanoplot|mattest|mapcaplot|manorm|malowess|maloglog|mairplot|mainvarsetnorm|maimage|magetfield|mafdr|maboxplot|knnimpute|knnclassify|joinseq|jcampread|isspantree|isomorphism|isoelectric|isdag|int2nt|int2aa|imageneread|hmmprofstruct|hmmprofmerge|hmmprofgenerate|hmmprofestimate|hmmprofalign|graphtraverse|graphtopoorder|graphshortestpath|graphpred2path|graphminspantree|graphmaxflow|graphisspantree|graphisomorphism|graphisdag|graphconncomp|graphcluster|graphallshortestpaths|gprread|gonnet|goannotread|getrelatives|getpdb|getnodesbyid|getnewickstr|getmatrix|gethmmtree|gethmmprof|gethmmalignment|getgeodata|getgenpept|getgenbank|getembl|getedgesbynodeid|getdescendants|getcanonical|getbyname|getblast|getancestors|get|geosoftread|genpeptread|genevarfilter|geneticcode|generangefilter|geneont|genelowvalfilter|geneentropyfilter|genbankread|gcrmabackadj|gcrma|galread|featuresparse|featuresmap|fastawrite|fastaread|exprprofvar|exprprofrange|evalrasmolscript|emblread|dolayout|dndsml|dnds|dna2rna|dimercount|dayhoff|cytobandread|crossvalind|cpgisland|conncomp|codoncount|codonbias|clustergram|cleave|classperf|chromosomeplot|cghcbs|celintensityread|blosum|blastreadlocal|blastread|blastncbi|blastlocal|blastformat|biograph|baselookup|basecount|atomiccomp|aminolookup|allshortestpaths|agferead|affyread|affyprobeseqread|affyprobeaffinities|affyinvarsetnorm|aacount|aa2nt|aa2int)\b
      comment: Matlab bioinformatics toolbox
      scope: support.function.toolbox.bioinformatics.matlab
  matlab_support_toolbox_communications:
    - match: \b(wgn|vitdec|vec2mat|varlms|syndtable|symerr|stdchan|ssbmod|ssbdemod|signlms|shift2mask|seqgen\.pn|seqgen|semianalytic|scatterplot|rsgenpoly|rsencof|rsenc|rsdecof|rsdec|rls|ricianchan|reset|rectpulse|rcosine|rcosiir|rcosflt|rcosfir|rayleighchan|randsrc|randintrlv|randint|randerr|randdeintrlv|quantiz|qfuncinv|qfunc|qammod|qamdemod|pskmod|pskdemod|primpoly|poly2trellis|pmmod|pmdemod|plot|pammod|pamdemod|oqpskmod|oqpskdemod|oct2dec|normlms|noisebw|muxintrlv|muxdeintrlv|mskmod|mskdemod|modnorm|modem\.qammod|modem\.qamdemod|modem\.pskmod|modem\.pskdemod|modem\.pammod|modem\.pamdemod|modem\.oqpskmod|modem\.oqpskdemod|modem\.mskmod|modem\.mskdemod|modem\.genqammod|modem\.genqamdemod|modem\.dpskmod|modem\.dpskdemod|modem|mlseeq|mldivide|minpol|matintrlv|matdeintrlv|mask2shift|marcumq|log|lms|lloyds|lineareq|istrellis|isprimitive|iscatastrophic|intrlv|intdump|ifft|huffmanenco|huffmandict|huffmandeco|hilbiir|helscanintrlv|helscandeintrlv|helintrlv|heldeintrlv|hank2sys|hammgen|gray2bin|gfweight|gftuple|gftrunc|gftable|gfsub|gfroots|gfrepcov|gfrank|gfprimfd|gfprimdf|gfprimck|gfpretty|gfmul|gfminpol|gflineq|gffilter|gfdiv|gfdeconv|gfcosets|gfconv|gfadd|gf|genqammod|genqamdemod|gen2par|fskmod|fskdemod|fmmod|fmdemod|finddelay|filter|fft|fec\.ldpcenc|fec\.ldpcdec|eyediagram|equalize|encode|dvbs2ldpc|dpskmod|dpskdemod|dpcmopt|dpcmenco|dpcmdeco|doppler\.rounded|doppler\.rjakes|doppler\.jakes|doppler\.gaussian|doppler\.flat|doppler\.bigaussian|doppler\.ajakes|doppler|distspec|dftmtx|dfe|deintrlv|decode|de2bi|cyclpoly|cyclgen|cosets|convmtx|convintrlv|convenc|convdeintrlv|compand|commscope\.eyediagram|commscope|cma|bsc|biterr|bin2gray|bi2de|bertool|bersync|berfit|berfading|berconfint|bercoding|berawgn|bchnumerr|bchgenpoly|bchenc|bchdec|awgn|arithenco|arithdeco|ammod|amdemod|alignsignals|algintrlv|algdeintrlv)\b
      comment: Matlab communications toolbox
      scope: support.function.toolbox.communications.matlab
  matlab_support_toolbox_control_systems:
    - match: \b(zpkdata|zpk|zgrid|zero|totaldelay|tfdata|tf|stepplot|stepinfo|step|stack|stabsep|ssdata|ssbal|ss2ss|ss|sminreal|size|sisotool|sisoinit|sigmaplot|sigma|sgrid|setoptions|setdelaymodel|set|series|rss|rlocusplot|rlocus|reshape|reg|real|pzplot|pzmap|pole|place|parallel|pade|ord2|obsvf|obsv|nyquistplot|nyquist|norm|nicholsplot|nichols|ngrid|ndims|modsep|modred|minreal|margin|lyapchol|lyap|ltiview|ltiprops|ltimodels|lsimplot|lsiminfo|lsim|lqry|lqrd|lqr|lqgreg|lqg|lft|kalmd|kalman|issiso|isproper|isempty|isdt|isct|iopzplot|iopzmap|inv|interp|initialplot|initial|impulseplot|impulse|imag|hsvplot|hsvd|hasdelay|gram|getoptions|getdelaymodel|get|gensig|gdare|gcare|fselect|freqresp|frdata|frd|fnorm|filt|feedback|fcat|evalfr|estim|esort|dssdata|dss|dsort|drss|dlyapchol|dlyap|dlqr|delayss|delay2z|dcgain|dare|damp|d2d|d2c|ctrlpref|ctrbf|ctrb|covar|connect|conj|chgunits|care|canon|c2d|bodeplot|bodemag|bode|bandwidth|balred|balreal|augstate|append|allmargin|acker|abs)\b
      comment: Matlab control systems toolbox
      scope: support.function.toolbox.control-systems.matlab
  matlab_support_toolbox_curve_fitting:
    - match: \b(type|smooth|set|probvalues|probnames|predint|plot|numcoeffs|numargs|islinear|integrate|indepnames|get|formula|fittype|fitoptions|fit|feval|excludedata|differentiate|dependnames|datastats|confint|coeffvalues|coeffnames|cftool|cflibhelp|cfit|category|argnames)\b
      comment: Matlab curve fitting toolbox
      scope: support.function.toolbox.curve-fitting.matlab
  matlab_support_toolbox_data_acquisition:
    - match: \b(wait|trigger|stop|start|softscope|size|showdaqevents|setverify|set|save|putvalue|putsample|putdata|propinfo|peekdata|obj2mfile|muxchanidx|makenames|load|length|isvalid|issending|isrunning|islogging|isdioline|ischannel|inspect|getvalue|getsample|getdata|get|flushdata|disp|digitalio|delete|dec2binvec|daqreset|daqregister|daqread|daqmem|daqhwinfo|daqhelp|daqfind|daqcallback|clear|binvec2dec|analogoutput|analoginput|addmuxchannel|addline|addchannel)\b
      comment: Matlab data acquisition toolbox
      scope: support.function.toolbox.data-acquisition.matlab
  matlab_support_toolbox_database:
    - match: \b(width|versioncolumns|update|unregister|tables|tableprivileges|supports|sql2native|setdbprefs|set|runstoredprocedure|rsmd|rows|rollback|resultset|register|querytimeout|querybuilder|procedures|procedurecolumns|primarykeys|ping|namecolumn|logintimeout|isurl|isreadonly|isnullcolumn|isjdbc|isdriver|isconnection|insert|indexinfo|importedkeys|getdatasources|get|fetchmulti|fetch|fastinsert|exportedkeys|exec|drivermanager|driver|dmd|database\.fetch|database|cursor\.fetch|crossreference|confds|commit|columns|columnprivileges|columnnames|cols|close|clearwarnings|bestrowid|attr)\b
      comment: Matlab database toolbox
      scope: support.function.toolbox.database.matlab
  matlab_support_toolbox_datafeed:
    - match: \b(yahoo|tables|stop|stockticker|showtrades|reuters|pricevol|nextinfo|kx|isconnection|insert|info|idc|hyperfeed|havertool|haver|get|fred|fetch|factset|exec|datastream|close|bloomberg)\b
      comment: Matlab datafeed toolbox
      scope: support.function.toolbox.datafeed.matlab
  matlab_support_toolbox_design:
    - match: \b(zplane|zpkshiftc|zpkshift|zpkrateup|zpklp2xn|zpklp2xc|zpklp2mbc|zpklp2mb|zpklp2lp|zpklp2hp|zpklp2bsc|zpklp2bs|zpklp2bpc|zpklp2bp|zpkftransf|zpkbpc2bpc|zerophase|window|validstructures|tf2cl|tf2ca|stepz|specifyall|sos|setspecs|set2int|scaleopts|scalecheck|scale|reset|reorder|reffilter|realizemdl|qreport|polyphase|phasez|phasedelay|parallel|order|nstates|normalizefreq|normalize|norm|noisepsdopts|noisepsd|multistage|msesim|msepred|mfilt\.linearinterp|mfilt\.iirwdfinterp|mfilt\.iirwdfdecim|mfilt\.iirinterp|mfilt\.iirdecim|mfilt\.holdinterp|mfilt\.firtdecim|mfilt\.firsrc|mfilt\.firinterp|mfilt\.firfracinterp|mfilt\.firfracdecim|mfilt\.firdecim|mfilt\.fftfirinterp|mfilt\.farrowsrc|mfilt\.cicinterp|mfilt\.cicdecim|mfilt\.cascade|mfilt|measure|maxstep|limitcycle|lagrange|kaiserwin|isstable|issos|isreal|isminphase|ismaxphase|islinphase|isfir|isallpass|int|info|impz|iirshiftc|iirshift|iirrateup|iirpowcomp|iirpeak|iirnotch|iirls|iirlpnormc|iirlpnorm|iirlp2xn|iirlp2xc|iirlp2mbc|iirlp2mb|iirlp2lp|iirlp2hp|iirlp2bsc|iirlp2bs|iirlp2bpc|iirlp2bp|iirlinphase|iirgrpdelay|iirftransf|iircomb|iirbpc2bpc|ifir|help|grpdelay|gain|freqz|freqsamp|freqrespopts|freqrespest|firtype|firpr2chfb|firnyquist|firminphase|firls|firlpnorm|firlp2lp|firlp2hp|firhalfband|firgr|fireqint|firceqrip|fircband|filtstates\.cic|filterbuilder|filter|fftcoeffs|fdesign\.rsrc|fdesign\.peak|fdesign\.parameq|fdesign\.octave|fdesign\.nyquist|fdesign\.notch|fdesign\.lowpass|fdesign\.isinclp|fdesign\.interpolator|fdesign\.hilbert|fdesign\.highpass|fdesign\.halfband|fdesign\.fracdelay|fdesign\.differentiator|fdesign\.decimator|fdesign\.ciccomp|fdesign\.bandstop|fdesign\.bandpass|fdesign\.arbmagnphase|fdesign\.arbmag|fdesign|fdatool|fcfwrite|farrow|euclidfactors|equiripple|ellip|double|disp|dfilt\.wdfallpass|dfilt\.scalar|dfilt\.parallel|dfilt\.latticemamin|dfilt\.latticemamax|dfilt\.latticearma|dfilt\.latticear|dfilt\.latticeallpass|dfilt\.dfsymfir|dfilt\.dffirt|dfilt\.dffir|dfilt\.dfasymfir|dfilt\.df2tsos|dfilt\.df2t|dfilt\.df2sos|dfilt\.df2|dfilt\.df1tsos|dfilt\.df1t|dfilt\.df1sos|dfilt\.df1|dfilt\.cascadewdfallpass|dfilt\.cascadeallpass|dfilt\.cascade|dfilt\.calatticepc|dfilt\.calattice|dfilt\.allpass|dfilt|designopts|designmethods|design|denormalize|cumsec|cost|convert|coewrite|coeread|coeffs|cl2tf|cheby2|cheby1|ca2tf|butter|block|autoscale|allpassshiftc|allpassshift|allpassrateup|allpasslp2xn|allpasslp2xc|allpasslp2mbc|allpasslp2mb|allpasslp2lp|allpasslp2hp|allpasslp2bsc|allpasslp2bs|allpasslp2bpc|allpasslp2bp|allpassbpc2bpc|adaptfilt\.ufdaf|adaptfilt\.tdafdft|adaptfilt\.tdafdct|adaptfilt\.swrls|adaptfilt\.swftf|adaptfilt\.ss|adaptfilt\.se|adaptfilt\.sd|adaptfilt\.rls|adaptfilt\.qrdrls|adaptfilt\.qrdlsl|adaptfilt\.pbufdaf|adaptfilt\.pbfdaf|adaptfilt\.nlms|adaptfilt\.lsl|adaptfilt\.lms|adaptfilt\.hswrls|adaptfilt\.hrls|adaptfilt\.gal|adaptfilt\.ftf|adaptfilt\.filtxlms|adaptfilt\.fdaf|adaptfilt\.dlms|adaptfilt\.blmsfft|adaptfilt\.blms|adaptfilt\.bap|adaptfilt\.apru|adaptfilt\.ap|adaptfilt\.adjlms|adaptfilt)\b
      comment: Matlab design toolbox
      scope: support.function.toolbox.design.matlab
  matlab_support_toolbox_excel_link:
    - match: \b(matlabsub|matlabinit|matlabfcn|MLUseFullDesktop|MLUseCellArray|MLStartDir|MLShowMatlabErrors|MLPutVar|MLPutMatrix|MLOpen|MLMissingDataAsNaN|MLGetVar|MLGetMatrix|MLGetFigure|MLEvalString|MLDeleteMatrix|MLClose|MLAutoStart|MLAppendMatrix)\b
      comment: Matlab excel link toolbox
      scope: support.function.toolbox.excel-link.matlab
  matlab_support_toolbox_filter_design_hdl_coder:
    - match: \b(generatetbstimulus|generatetb|generatehdl|fdhdltool)\b
      comment: Matlab filter design hdl coder toolbox
      scope: support.function.toolbox.filter-design-hdl-coder.matlab
  matlab_support_toolbox_financial:
    - match: \b(zero2pyld|zero2fwd|zero2disc|zbtyield|zbtprice|yldtbill|yldmat|ylddisc|yearfrac|yeardays|year|xirr|x2mdate|wrkdydif|willpctr|willad|weights2holdings|weekday|wclose|volroc|vertcat|uplus|uminus|uicalendar|ugarchsim|ugarchpred|ugarchllf|ugarch|typprice|tsmovavg|tsmom|tsaccel|tr2bonds|toweekly|totalreturnprice|tosemi|toquoted|toquarterly|tomonthly|todecimal|today|todaily|toannual|times|time2date|tick2ret|thirtytwo2dec|thirdwednesday|tbl2bond|taxedrr|targetreturn|subsref|subsasgn|stochosc|std|spctkd|sortfts|smoothts|size|sharpe|setfield|selectreturn|second|rsindex|rmfield|ret2tick|resamplets|rdivide|pyld2zero|pvvar|pvtrend|pvfix|prtbill|prmat|prdisc|prcroc|prbyzero|power|posvolidx|portvrisk|portstats|portsim|portrand|portopt|portcons|portalpha|portalloc|pointfig|plus|plot|periodicreturns|peravg|pcpval|pcglims|pcgcomp|pcalims|payuni|payper|payodd|payadv|opprofit|onbalvol|nweekdate|now|nomrr|negvolidx|mvnrstd|mvnrobj|mvnrmle|mvnrfish|mtimes|mrdivide|movavg|months|month|mirr|minute|minus|min|merge|medprice|mean|maxdrawdown|max|macd|m2xdate|lweekdate|lpm|log2|log10|log|llow|length|leadts|lbusdate|lagts|issorted|isfield|isequal|iscompatible|isbusday|irr|inforatio|hour|horzcat|holidays|holdings2weights|hist|highlow|hhigh|getnameidx|getfield|geom2arith|fwd2zero|fvvar|fvfix|fvdisc|ftsuniq|ftstool|ftsinfo|ftsgui|ftsbound|fts2mat|fts2ascii|frontier|frontcon|freqstr|freqnum|frac2cur|fpctkd|fints|filter|fillts|fieldnames|fetch|fbusdate|extfield|exp|ewstats|eomday|eomdate|end|emaxdrawdown|elpm|effrr|ecmnstd|ecmnobj|ecmnmle|ecmninit|ecmnhess|ecmnfish|ecmmvnrstd|ecmmvnrobj|ecmmvnrmle|ecmmvnrfish|ecmlsrobj|ecmlsrmle|discrate|disc2zero|diff|depstln|depsoyd|deprdv|depgendb|depfixdb|dec2thirtytwo|daysdif|daysadd|daysact|days365|days360psa|days360isda|days360e|days360|day|datewrkdy|datevec|datestr|datenum|datemnth|datefind|datedisp|dateaxis|date2time|cur2str|cur2frac|cumsum|createholidays|cpnpersz|cpndaysp|cpndaysn|cpndatepq|cpndatep|cpndatenq|cpndaten|cpncount|cov2corr|corr2cov|convertto|convert2sur|chfield|chartfts|chaikvolat|chaikosc|cftimes|cfport|cfdur|cfdates|cfconv|cfamounts|candle|busdays|busdate|boxcox|bollinger|bolling|bndyield|bndspread|bndprice|bnddury|bnddurp|bndconvy|bndconvp|blsvega|blstheta|blsrho|blsprice|blslambda|blsimpv|blsgamma|blsdelta|blkprice|blkimpv|binprice|beytbill|barh|bar3h|bar3|bar|ascii2fts|arith2geom|annuterm|annurate|amortize|adosc|adline|active2abs|acrudisc|acrubond|accrfrac|abs2active)\b
      comment: Matlab financial toolbox
      scope: support.function.toolbox.financial.matlab
  matlab_support_toolbox_financial_derivatives:
    - match: \b(trintreeshape|trintreepath|treeviewer|treeshape|treepath|time2date|swaptionbyhw|swaptionbyhjm|swaptionbybk|swaptionbybdt|swapbyzero|swapbyhw|swapbyhjm|swapbybk|swapbybdt|stockspec|stockoptspec|ratetimes|rate2disc|optstockbyitt|optstockbyeqp|optstockbycrr|optbndbyhw|optbndbyhjm|optbndbybk|optbndbybdt|mmktbyhjm|mmktbybdt|mktrintree|mktree|mkbush|lookbackbyitt|lookbackbyeqp|lookbackbycrr|itttree|itttimespec|ittsens|ittprice|isafin|intenvset|intenvsens|intenvprice|intenvget|insttypes|instswaption|instswap|instsetfield|instselect|instoptstock|instoptbnd|instlookback|instlength|instgetcell|instget|instfloor|instfloat|instfixed|instfind|instfields|instdisp|instdelete|instcompound|instcf|instcap|instbond|instbarrier|instasian|instaddfield|instadd|hwvolspec|hwtree|hwtimespec|hwsens|hwprice|hjmvolspec|hjmtree|hjmtimespec|hjmsens|hjmprice|hedgeslf|hedgeopt|floorbyhw|floorbyhjm|floorbybk|floorbybdt|floatbyzero|floatbyhw|floatbyhjm|floatbybk|floatbybdt|fixedbyzero|fixedbyhw|fixedbyhjm|fixedbybk|fixedbybdt|eqptree|eqptimespec|eqpsens|eqpprice|disc2rate|derivset|derivget|datedisp|date2time|cvtree|crrtree|crrtimespec|crrsens|crrprice|compoundbyitt|compoundbyeqp|compoundbycrr|classfin|cfbyzero|cfbyhw|cfbyhjm|cfbybk|cfbybdt|capbyhw|capbyhjm|capbybk|capbybdt|bushshape|bushpath|bondbyzero|bondbyhw|bondbyhjm|bondbybk|bondbybdt|bkvolspec|bktree|bktimespec|bksens|bkprice|bdtvolspec|bdttree|bdttimespec|bdtsens|bdtprice|barrierbyitt|barrierbyeqp|barrierbycrr|asianbyitt|asianbyeqp|asianbycrr)\b
      comment: Matlab financial derivatives toolbox
      scope: support.function.toolbox.financial-derivatives.matlab
  matlab_support_toolbox_fixed_income:
    - match: \b(zeroyield|zeroprice|tfutyieldbyrepo|tfutpricebyrepo|tfutimprepo|tfutbyyield|tfutbyprice|tbillyield2disc|tbillyield|tbillval01|tbillrepo|tbillprice|tbilldisc2yield|stepcpnyield|stepcpnprice|stepcpncfamounts|psaspeed2rate|psaspeed2default|mbsyield2speed|mbsyield2oas|mbsyield|mbswal|mbsprice2speed|mbsprice2oas|mbsprice|mbspassthrough|mbsoas2yield|mbsoas2price|mbsnoprepay|mbsdury|mbsdurp|mbsconvy|mbsconvp|mbscfamounts|liborprice|liborfloat2fixed|liborduration|convfactor|cfamounts|cdyield|cdprice|cdai|cbprice|bkput|bkfloorlet|bkcaplet|bkcall)\b
      comment: Matlab fixed income toolbox
      scope: support.function.toolbox.fixed-income.matlab
  matlab_support_toolbox_fixed_point:
    - match: \b(zlim|ylim|xlim|wordlength|waterfall|voronoin|voronoi|vertcat|upperbound|uplus|uminus|uint8|uint32|uint16|triu|trisurf|triplot|trimesh|tril|treeplot|transpose|tostring|toeplitz|times|text|surfnorm|surfl|surfc|surf|sum|subsref|subsasgn|sub|stripscaling|streamtube|streamslice|streamribbon|stem3|stem|stairs|squeeze|sqrt|spy|slice|size|single|sign|shiftdim|set|semilogy|semilogx|sdec|scatter3|scatter|savefipref|round|rose|ribbon|rgbplot|reshape|resetlog|reset|rescale|repmat|realmin|realmax|real|range|randquant|quiver3|quiver|quantizer|quantize|pow2|polar|plus|plotyy|plotmatrix|plot3|plot|permute|pcolor|patch|or|oct|nunderflows|numerictype|numberofelements|num2int|num2hex|num2bin|noverflows|not|noperations|ne|ndims|mtimes|mpy|minus|minlog|min|meshz|meshc|mesh|maxlog|max|lt|lsb|lowerbound|loglog|logical|line|length|le|isvector|issigned|isscalar|isrow|isreal|ispropequal|isobject|isnumerictype|isnumeric|isnan|isinf|isfinite|isfimath|isfi|isequal|isempty|iscolumn|ipermute|intmin|intmax|int8|int32|int16|int|innerprodintbits|imag|horzcat|histc|hist|hex2num|hex|hankel|gt|gplot|getmsb|getlsb|get|ge|fractionlength|fplot|flipud|fliplr|flipdim|fipref|fimath|fi|feather|ezsurfc|ezsurf|ezpolar|ezplot3|ezplot|ezmesh|ezcontourf|ezcontour|exponentmin|exponentmax|exponentlength|exponentbias|etreeplot|errorbar|eq|eps|end|double|divide|disp|diag|denormalmin|denormalmax|dec|ctranspose|copyobj|convergent|contourf|contourc|contour3|contour|conj|coneplot|complex|compass|comet3|comet|clabel|buffer|bitxorreduce|bitxor|bitsrl|bitsra|bitsll|bitsliceget|bitshift|bitset|bitror|bitrol|bitorreduce|bitor|bitget|bitconcat|bitcmp|bitandreduce|bitand|bin2num|bin|barh|bar|area|any|and|all|add|abs)\b
      comment: Matlab fixed-point toolbox
      scope: support.function.toolbox.fixed-point.matlab
  matlab_support_toolbox_fuzzy_logic:
    - match: \b(zmf|writefis|trimf|trapmf|surfview|subclust|smf|sigmf|showrule|showfis|sffis|setfis|ruleview|ruleedit|rmvar|rmmf|readfis|psigmf|probor|plotmf|plotfis|pimf|parsrule|newfis|mfedit|mf2mf|mam2sug|getfis|gensurf|genfis3|genfis2|genfis1|gbellmf|gaussmf|gauss2mf|fuzzy|fuzblock|fuzarith|findcluster|fcm|evalmf|evalfis|dsigmf|defuzz|convertfis|anfisedit|anfis|addvar|addrule|addmf)\b
      comment: Matlab fuzzy logic toolbox
      scope: support.function.toolbox.fuzzy-logic.matlab
  matlab_support_toolbox_garch:
    - match: \b(ret2price|price2ret|ppTSTest|ppARTest|ppARDTest|parcorr|lratiotest|lbqtest|lagmatrix|hpfilter|garchsim|garchset|garchpred|garchplot|garchma|garchinfer|garchget|garchfit|garchdisp|garchcount|garchar|dfTSTest|dfARTest|dfARDTest|crosscorr|autocorr|archtest|aicbic)\b
      comment: Matlab GARCH toolbox
      scope: support.function.toolbox.garch.matlab
  matlab_support_toolbox_genetic_algorithms:
    - match: \b(threshacceptbnd|simulannealbnd|saoptimset|saoptimget|psoptimset|psoptimget|psearchtool|patternsearch|gatool|gaoptimset|gaoptimget|gamultiobj|ga)\b
      comment: Matlab genetic algorithms toolbox
      scope: support.function.toolbox.genetic-algorithms.matlab
  matlab_support_toolbox_image_acquisition:
    - match: \b(wait|videoinput|triggerinfo|triggerconfig|trigger|stoppreview|stop|start|set|save|propinfo|preview|peekdata|obj2mfile|load|isvalid|isrunning|islogging|imaqtool|imaqreset|imaqmontage|imaqmem|imaqhwinfo|imaqhelp|imaqfind|getsnapshot|getselectedsource|getdata|get|flushdata|disp|delete|closepreview|clear)\b
      comment: Matlab image acquisition toolbox
      scope: support.function.toolbox.image-acquisition.matlab
  matlab_support_toolbox_image_processing:
    - match: \b(zoom|ycbcr2rgb|xyz2uint16|xyz2double|wiener2|whitepoint|watershed|warp|uintlut|uint8|uint16|truesize|translate|tonemap|tforminv|tformfwd|tformarray|subimage|stretchlim|strel|stdfilt|std2|roipoly|roifilt2|roifill|roicolor|rgbplot|rgb2ycbcr|rgb2ntsc|rgb2ind|rgb2hsv|rgb2gray|regionprops|reflect|rangefilt|radon|qtsetblk|qtgetblk|qtdecomp|psf2otf|poly2mask|pixval|phantom|para2fan|padarray|otf2psf|ordfilt2|ntsc2rgb|normxcorr2|nlfilter|nitfread|nitfinfo|montage|medfilt2|mean2|mat2gray|maketform|makeresampler|makelut|makecform|makeConstrainToRectFcn|label2rgb|lab2uint8|lab2uint16|lab2double|isrgb|isnitf|isind|isicc|isgray|isflat|isbw|iradon|iptwindowalign|iptsetpref|iptremovecallback|iptnum2ordinal|ipticondir|iptgetpref|iptgetapi|iptdemos|iptcheckstrs|iptchecknargin|iptcheckmap|iptcheckinput|iptcheckhandle|iptcheckconn|iptaddcallback|iptSetPointerBehavior|iptPointerManager|iptGetPointerBehavior|ippl|intlut|interfileread|interfileinfo|ind2rgb|ind2gray|imwrite|imview|imtransform|imtophat|imtool|imsubtract|imshow|imscrollpanel|imsave|imrotate|imresize|imregionalmin|imregionalmax|imrect|imreconstruct|imread|impyramid|imputfile|improfile|impositionrect|impoly|impoint|implay|impixelregionpanel|impixelregion|impixelinfoval|impixelinfo|impixel|imoverviewpanel|imoverview|imopen|imnoise|immultiply|immovie|immagbox|imline|imlincomb|imimposemin|imhmin|imhmax|imhist|imhandles|imgetfile|imgcf|imgca|imfreehand|imfinfo|imfilter|imfill|imextendedmin|imextendedmax|imerode|imellipse|imdivide|imdistline|imdisplayrange|imdilate|imcrop|imcontrast|imcontour|imcomplement|imclose|imclearborder|imbothat|imattributes|imapprox|imagemodel|imageinfo|imadjust|imadd|imabsdiff|im2uint8|im2uint16|im2single|im2java2d|im2java|im2int16|im2double|im2col|im2bw|ifftn|ifft2|ifanbeam|idct2|iccwrite|iccroot|iccread|iccfind|hsv2rgb|houghpeaks|houghlines|hough|histeq|hdrread|graythresh|grayslice|graycoprops|graycomatrix|gray2ind|getsequence|getrect|getrangefromclass|getpts|getnhood|getneighbors|getline|getimagemodel|getimage|getheight|fwind2|fwind1|ftrans2|fspecial|fsamp2|freqz2|freqspace|fliptform|findbounds|filter2|fftshift|fftn|fft2|fanbeam|fan2para|entropyfilt|entropy|edgetaper|edge|double|dither|dicomwrite|dicomuid|dicomread|dicomlookup|dicominfo|dicomdict|dicomanon|demosaic|decorrstretch|deconvwnr|deconvreg|deconvlucy|deconvblind|dctmtx|dct2|cpstruct2pairs|cpselect|cpcorr|cp2tform|corr2|convn|convmtx2|conv2|conndef|colorbar|colfilt|col2im|cmunique|cmpermute|checkerboard|bwunpack|bwulterode|bwtraceboundary|bwselect|bwperim|bwpack|bwmorph|bwlabeln|bwlabel|bwhitmiss|bweuler|bwdist|bwboundaries|bwareaopen|bwarea|brighten|blkproc|bestblk|axes2pix|applylut|applycform|analyze75read|analyze75info|adapthisteq)\b
      comment: Matlab image processing toolbox
      scope: support.function.toolbox.image-processing.matlab
  matlab_support_toolbox_instrument_control:
    - match: \b(visa|update|udp|trigger|tmtool|tcpip|stopasync|spoll|size|set|serialbreak|serial|selftest|scanstr|save|resolvehost|remove|record|readasync|query|propinfo|obj2mfile|midtest|midedit|methods|memwrite|memunmap|memread|mempoke|mempeek|memmap|makemid|load|length|iviconfigurationstore|isvalid|invoke|instrreset|instrnotify|instrid|instrhwinfo|instrhelp|instrfindall|instrfind|instrcallback|inspect|icdevice|gpib|geterror|get|fwrite|fscanf|fread|fprintf|fopen|flushoutput|flushinput|fgets|fgetl|fclose|echoudp|echotcpip|disp|disconnect|devicereset|delete|connect|commit|clrdevice|clear|binblockwrite|binblockread|add)\b
      comment: Matlab instrument control toolbox
      scope: support.function.toolbox.instrument-control.matlab
  matlab_support_toolbox_mapping:
    - match: \b(zerom|zero22pi|zdatam-ui|zdatam|wrapToPi|wrapTo360|wrapTo2Pi|wrapTo180|worldmap|worldfilewrite|worldfileread|westof|vmap0ui|vmap0rhead|vmap0read|vmap0data|vinvtran|viewshed|vfwdtran|vec2mtx|utmzoneui|utmzone|utmgeoid|usgsdems|usgsdem|usgs24kdem|usamap|updategeostruct|unwrapMultipart|unitstr|unitsratio|undotrim|undoclip|uimaptbx|trimdata|trimcart|trackui|trackg|track2|track1|track|toRadians|toDegrees|tissot|timezone|timedim|time2str|tightmap|tigerp|tigermif|tgrline|textm|tbase|tagm-ui|tagm|symbolm|surfm|surflsrm|surflm|surfdist|surfacem|str2angle|stem3m|stdm|stdist|spzerom|spcread|smoothlong|sm2rad|sm2nm|sm2km|sm2deg|sizem|showm-ui|showm|showaxes|shapewrite|shaperead|shapeinfo|shaderel|setpostn|setm|setltln|seedm|sectorg|sec2hr|sec2hms|sec2hm|sdtsinfo|sdtsdemread|scxsc|scirclui|scircleg|scircle2|scircle1|scatterm|scaleruler|satbath|rsphere|roundn|rotatetext|rotatem|rootlayr|rhxrh|restack|resizem|removeExtraNanSeparators|refvec2mat|refmat2vec|reducem|reckon|readmtx|readfk5|readfields|rcurve|rad2sm|rad2nm|rad2km|rad2dms|rad2dm|rad2deg|quiverm|quiver3m|qrydata|putpole|projlist|projinv|projfwd|project|previewmap|polyxpoly|polysplit|polymerge|polyjoin|polycut|polybool|poly2fv|poly2cw|poly2ccw|polcmap|plotm|plot3m|plabel|pixcenters|pix2map|pix2latlon|pcolorm|patchm|patchesm|parallelui|paperscale|panzoom|originui|org2pol|onem|npi2pi|northarrow|nm2sm|nm2rad|nm2km|nm2deg|newpole|neworig|navfix|nanm|nanclip|namem|n2ecc|mobjects|mlayers|mlabelzero22pi|mlabel|minvtran|minaxis|mfwdtran|meshm|meshlsrm|meshgrat|meridianfwd|meridianarc|meanm|mdistort|mat2hms|mat2dms|mapview|maptrims|maptrimp|maptriml|maptrim|maptool|mapshow|maps|mapprofile|mapoutline|maplist|mapbbox|map2pix|makesymbolspec|makerefmat|makemapped|makedbfspec|makeattribspec|majaxis|lv2ecef|ltln2val|los2|linem|linecirc|limitm|lightmui|lightm|legs|lcolorbar|latlon2pix|kmlwrite|km2sm|km2rad|km2nm|km2deg|ispolycw|ismapped|ismap|isShapeMultipart|intrplon|intrplat|interpm|inputm|ind2rgb8|imbedm|hr2sec|hr2hms|hr2hm|hms2sec|hms2mat|hms2hr|hms2hm|histr|hista|hidem-ui|hidem|handlem-ui|handlem|gtopo30s|gtopo30|gtextm|gshhs|grn2eqa|gridm|grid2image|grepfields|gradientm|globedems|globedem|getworldfilename|getseeds|getm|geotiffread|geotiffinfo|geotiff2mstruct|geoshow|geoloc2grid|geodetic2geocentricLat|geodetic2ecef|geocentric2geodeticLat|gcxsc|gcxgc|gcwaypts|gcpmap|gcm|gc2sc|fromRadians|fromDegrees|framem|flatearthpoly|flat2ecc|fipsname|findm|filterm|fillm|fill3m|extractm|extractfield|etopo5|etopo|eqa2grn|epsm|encodem|ellipse1|elevation|egm96geoid|ecef2lv|ecef2geodetic|ecc2n|ecc2flat|eastof|dteds|dted|driftvel|driftcorr|dreckon|dms2rad|dms2mat|dms2dm|dms2degrees|dms2deg|dm2degrees|distortcalc|distdim|distance|dist2str|displaym|departure|demdataui|demcmap|degrees2dms|degrees2dm|deg2sm|deg2rad|deg2nm|deg2km|deg2dms|deg2dm|defaultm|dcwrhead|dcwread|dcwgaz|dcwdata|daspectm|crossfix|convertlat|contourm|contourfm|contourcmap|contour3m|cometm|comet3m|combntns|colorui|colorm|cmapui|clrmenu|closePolygonParts|clmo-ui|clmo|clma|clipdata|clegendm|clabelm|circcirc|changem|cart2grn|camupm|camtargm|camposm|bufferm|azimuth|axesscale|axesmui|axesm|axes2ecc|avhrrlambert|avhrrgoode|areaquad|areamat|areaint|arcgridread|antipode|angledim|angl2str|almanac)\b
      comment: Matlab mapping toolbox
      scope: support.function.toolbox.mapping.matlab
  matlab_support_toolbox_model_based_calibration:
    - match: \b(modelinput|getAlternativeTypes|getAlternativeNames|YData|XDataNames|XData|Widths|Values|Value|UserVariables|UpdateResponseFeatures|UpdateResponse|Units|Type|TestPlans|TestFilters|SummaryStatisticsForTest|SummaryStatistics|StepwiseStatus|StepwiseSelection|StepwiseRegression|Status|StatisticsDialog|SizeOfParameterSet|SingleVIF|SignalUnits|SignalNames|SetupDialog|SetTermStatus|SaveAs|Save|RollbackEdit|RestoreDataForTest|RestoreData|Responses|ResponseSignalName|Response|RemoveVariable|RemoveTestFilter|RemoveOutliersForTest|RemoveOutliers|RemoveFilter|RemoveData|Remove|RecordsPerTest|Properties|PredictedValueForTest|PredictedValue|PartialVIF|Parameters|ParameterStatistics|PEVForTest|PEV|Owner|OutputData|OutlierIndicesForTest|OutlierIndices|NumberOfTests|NumberOfRecords|NumberOfParameters|NumberOfInputs|New|Names|Name|MultipleVIF|ModifyVariable|ModifyTestFilter|ModifyFilter|Modified|ModelSetup|ModelForTest|Model|MakeHierarchicalResponse|LocalResponses|LoadProject|Load|Levels|Level|Jacobian|IsEditable|IsBeingEdited|IsAlternative|InputsPerLevel|Inputs|InputSignalNames|InputSetupDialog|InputData|ImportFromMBCDataStructure|ImportFromFile|GetTermStatus|GetTermLabel|GetIncludedTerms|GetDesignMatrix|GetAllTerms|FitAlgorithm|Fit|Filters|Filename|ExportToMBCDataStructure|Export|Evaluate|DoubleResponseData|DoubleInputData|DiagnosticStatistics|DetachData|DefineTestGroups|DefineNumberOfRecordsPerTest|DefaultModels|DataFileTypes|Data|CreateTestplan|CreateResponseFeature|CreateResponse|CreateProject|CreateModel|CreateData|CreateAlternativeModels|CreateAlgorithm|Covariance|Correlation|CopyData|CommitEdit|ChooseAsBest|Centers|BoxCoxSSE|BeginEdit|AttachData|Append|AlternativeResponses|AlternativeModelStatistics|AliasMatrix|AddVariable|AddTestFilter|AddFilter)\b
      comment: Matlab model-based calibration toolbox
      scope: support.function.toolbox.model-based-calibration.matlab
  matlab_support_toolbox_model_predictive_control:
    - match: \b(zpk|trim|tf|ss|size|sim|setoutdist|setname|setmpcsignals|setmpcdata|setindist|setestim|set|qpdantz|plot|pack|mpcverbosity|mpcstate|mpcsimopt|mpcprops|mpcmove|mpchelp|mpc|getoutdist|getname|getmpcdata|getindist|getestim|get|d2d|compare|cloffset)\b
      comment: Matlab model predictive control toolbox
      scope: support.function.toolbox.model-predictive-control.matlab
  matlab_support_toolbox_neural_network:
    - match: \b(vec2ind|tribas|trainscg|trains|trainrp|trainr|trainoss|trainlm|traingdx|traingdm|traingda|traingd|traincgp|traincgf|traincgb|trainc|trainbr|trainbfgc|trainbfg|trainb|train|tansig|sse|srchhyb|srchgol|srchcha|srchbre|srchbac|sp2narx|softmax|sim|setx|seq2con|scalprod|satlins|satlin|revert|removerows|removeconstantrows|randtop|rands|randnr|randnc|radbas|quant|purelin|processpca|postreg|poslin|pnormc|plotvec|plotv|plotsom|plotpv|plotperf|plotpc|plotes|plotep|plotbr|normr|normprod|normc|nntool|nnt2som|nnt2rb|nnt2p|nnt2lvq|nnt2lin|nnt2hop|nnt2ff|nnt2elm|nnt2c|nftool|newsom|newrbe|newrb|newpnn|newp|newnarxsp|newnarx|newlvq|newlrn|newlind|newlin|newhop|newgrnn|newfftd|newff|newelm|newdtdnn|newcf|newc|network|netsum|netprod|netinv|negdist|mseregec|msereg|mse|minmax|midpoint|maxlinlr|mapstd|mapminmax|mandist|mae|logsig|linkdist|learnwh|learnsom|learnpn|learnp|learnos|learnlv2|learnlv1|learnk|learnis|learnhd|learnh|learngdm|learngd|learncon|initzero|initwb|initnw|initlay|initcon|init|ind2vec|hintonwb|hintonw|hextop|hardlims|hardlim|gridtop|getx|gensim|fixunknowns|errsurf|dotprod|dividerand|divideint|divideind|divideblock|dist|display|disp|convwf|concur|con2seq|compet|combvec|calcperf|calcpd|calcjx|calcjejj|calcgx|boxdist|adapt)\b
      comment: Matlab neural network toolbox
      scope: support.function.toolbox.neural-network.matlab
  matlab_support_toolbox_opc:
    - match: \b(writeasync|write|wait|trend|stop|start|showopcevents|set|serveritems|serveritemprops|save|removepublicgroup|refresh|readasync|read|propinfo|peekdata|openosf|opctool|opcsupport|opcstruct2timeseries|opcstruct2array|opcserverinfo|opcreset|opcregister|opcread|opcqstr|opcqparts|opcqid|opchelp|opcfind|opcda|opccallback|obj2mfile|makepublic|load|isvalid|getnamespace|getdata|get|genslwrite|genslread|flushdata|flatnamespace|disp|disconnect|delete|copyobj|connect|clonegroup|cleareventlog|cancelasync|additem|addgroup)\b
      comment: Matlab OPC toolbox
      scope: support.function.toolbox.opc.matlab
  matlab_support_toolbox_optimization:
    - match: \b(quadprog|optimtool|optimset|optimget|lsqnonneg|lsqnonlin|lsqlin|lsqcurvefit|linprog|gangstr|fzmult|fzero|fsolve|fseminf|fminunc|fminsearch|fminimax|fmincon|fminbnd|fgoalattain|color|bintprog)\b
      comment: Matlab optimization toolbox
      scope: support.function.toolbox.optimization.matlab
  matlab_support_toolbox_rf:
    - match: \b(writeva|write|timeresp|smith|setop|semilogy|semilogx|rfmodel\.rational|rfdata\.power|rfdata\.noise|rfdata\.nf|rfdata\.network|rfdata\.mixerspur|rfdata\.ip3|rfdata\.data|rfckt\.txline|rfckt\.twowire|rfckt\.shuntrlc|rfckt\.seriesrlc|rfckt\.series|rfckt\.rlcgline|rfckt\.passive|rfckt\.parallelplate|rfckt\.parallel|rfckt\.mixer|rfckt\.microstrip|rfckt\.lclowpasstee|rfckt\.lclowpasspi|rfckt\.lchighpasstee|rfckt\.lchighpasspi|rfckt\.lcbandstoptee|rfckt\.lcbandstoppi|rfckt\.lcbandpasstee|rfckt\.lcbandpasspi|rfckt\.hybridg|rfckt\.hybrid|rfckt\.delay|rfckt\.datafile|rfckt\.cpw|rfckt\.coaxial|rfckt\.cascade|rfckt\.amplifier|restore|read|polar|plotyy|plot|loglog|listparam|listformat|impulse|getz0|getop|freqresp|extract|circle|calculate|analyze)\b
      comment: Matlab RF toolbox
      scope: support.function.toolbox.rf.matlab
  matlab_support_toolbox_robust_control:
    - match: \b(wcsens|wcnorm|wcmargin|wcgopt|wcgain|usubs|uss|usimsamp|usiminfo|usimfill|usample|ureal|uplot|umat|ultidyn|ufrd|udyn|ucomplexm|ucomplex|sysic|symdec|stack|stabproj|squeeze|slowfast|skewdec|simplify|showlmi|setmvar|setlmis|sectf|sdlsim|sdhinfsyn|sdhinfnorm|schurmr|robuststab|robustperf|robopt|repmat|reduce|randuss|randumat|randatom|quadstab|quadperf|pvinfo|pvec|psys|psinfo|popov|polydec|pdsimul|pdlstab|normalized2actual|newlmi|ncfsyn|ncfmr|ncfmargin|mussvextract|mussv|msfsyn|modreal|mktito|mkfilter|mixsyn|mincx|matnbr|mat2dec|ltrsyn|ltiarray2uss|loopsyn|loopsens|loopmargin|lmivar|lmiterm|lmireg|lminbr|lmiinfo|lmiedit|lftdata|isuncertain|ispsys|imp2ss|imp2exp|icsignal|iconnect|icomplexify|hinfsyn|hinfgs|hankelsv|hankelmr|h2syn|h2hinfsyn|gridureal|gevp|getlmis|genphase|gapmetric|fitmagfrd|fitfrd|feasp|evallmi|drawmag|dmplot|dksyn|dkitopt|diag|delmvar|dellmi|defcx|decnbr|decinfo|decay|dec2mat|dcgainmr|cpmargin|complexify|cmsclsyn|bstmr|bilin|balancmr|augw|aff2pol|actual2normalized)\b
      comment: Matlab robust control toolbox
      scope: support.function.toolbox.robust-control.matlab
  matlab_support_toolbox_signal_processing:
    - match: \b(zplane|zp2tf|zp2ss|zp2sos|zerophase|yulewalk|xcov|xcorr2|xcorr|wvtool|wintool|window|vco|upsample|upfirdn|unwrap|uencode|udecode|tukeywin|tripuls|triang|tfestimate|tf2zpk|tf2zp|tf2ss|tf2sos|tf2latc|taylorwin|strips|stmcb|stepz|ss2zp|ss2tf|ss2sos|square|sptool|spectrum\.yulear|spectrum\.welch|spectrum\.periodogram|spectrum\.music|spectrum\.mtm|spectrum\.mcov|spectrum\.eigenvector|spectrum\.cov|spectrum\.burg|spectrum|spectrogram|sosfilt|sos2zp|sos2tf|sos2ss|sos2cell|sinc|sigwin|sgolayfilt|sgolay|seqperiod|schurrc|sawtooth|rootmusic|rooteig|rlevinson|residuez|resample|rectwin|rectpuls|rceps|rc2poly|rc2lar|rc2is|rc2ac|pyulear|pwelch|pulstran|prony|pow2db|polystab|polyscale|poly2rc|poly2lsf|poly2ac|pmusic|pmtm|pmcov|phasez|phasedelay|periodogram|peig|pcov|pburg|parzenwin|nuttallwin|mscohere|modulate|medfilt1|maxflat|lsf2poly|lpc|lp2lp|lp2hp|lp2bs|lp2bp|levinson|latcfilt|latc2tf|lar2rc|kaiserord|kaiser|is2rc|invfreqz|invfreqs|intfilt|interp|impz|impinvar|ifft2|ifft|idct|icceps|hilbert|hann|hamming|grpdelay|goertzel|gmonopuls|gausswin|gaussfir|gauspuls|fvtool|freqz|freqspace|freqs|flattopwin|firrcos|firpmord|firpm|firls|fircls1|fircls|fir2|fir1|findpeaks|filtstates\.dfiir|filtstates|filtic|filtfilt|filternorm|filter2|filter|fftshift|fftfilt|fft2|fft|fdatool|eqtflength|ellipord|ellipap|ellip|dspfwiz|dspdata\.pseudospectrum|dspdata\.psd|dspdata\.msspectrum|dspdata|dpsssave|dpssload|dpssdir|dpssclear|dpss|downsample|diric|digitrevorder|dftmtx|dfilt\.statespace|dfilt\.scalar|dfilt\.parallel|dfilt\.latticemamin|dfilt\.latticemamax|dfilt\.latticearma|dfilt\.latticear|dfilt\.latticeallpass|dfilt\.fftfir|dfilt\.dfsymfir|dfilt\.dffirt|dfilt\.dffir|dfilt\.dfasymfir|dfilt\.df2tsos|dfilt\.df2t|dfilt\.df2sos|dfilt\.df2|dfilt\.df1tsos|dfilt\.df1t|dfilt\.df1sos|dfilt\.df1|dfilt\.delay|dfilt\.cascade|dfilt|demod|deconv|decimate|dct|db2pow|czt|cpsd|cplxpair|cov|corrmtx|corrcoef|convmtx|conv2|conv|chirp|cheby2|cheby1|chebwin|cheb2ord|cheb2ap|cheb1ord|cheb1ap|cfirpm|cell2sos|cconv|cceps|buttord|butter|buttap|buffer|bohmanwin|blackmanharris|blackman|bitrevorder|bilinear|besself|besselap|bartlett|barthannwin|aryule|armcov|arcov|arburg|angle|ac2rc|ac2poly|abs)\b
      comment: Matlab signal processing toolbox
      scope: support.function.toolbox.signal-processing.matlab
  matlab_support_toolbox_spline:
    - match: \b(tpaps|titanium|subplus|stmak|stcol|spterms|sprpp|spmak|splpp|splinetool|spcrv|spcol|spaps|spapi|spap2|sorted|slvblk|rsmak|rscvn|rpmak|ppmak|optknt|newknt|knt2mlt|knt2brk|getcurve|franke|fnzeros|fnxtr|fnval|fntlr|fnrfn|fnplt|fnmin|fnjmp|fnint|fndir|fnder|fncmb|fnchg|fnbrk|fn2fm|cscvn|csaps|csapi|csape|chbpnt|bspline|bspligui|brk2knt|bkbrk|aveknt|augknt|aptknt)\b
      comment: Matlab spline toolbox
      scope: support.function.toolbox.spline.matlab
  matlab_support_toolbox_statistics:
    - match: \b(ztest|zscore|x2fx|wishrnd|wblstat|wblrnd|wblplot|wblpdf|wbllike|wblinv|wblfit|wblcdf|view|vartestn|vartest2|vartest|var|upperparams|unifstat|unifrnd|unifpdf|unifit|unifinv|unifcdf|unidstat|unidrnd|unidpdf|unidinv|unidcdf|type|ttest2|ttest|tstat|trnd|trimmean|treeval|treetest|treeprune|treefit|treedisp|tpdf|tinv|tiedrank|test|tdfread|tcdf|tblwrite|tblread|tabulate|surfht|summary|stepwisefit|stepwise|std|statset|statget|squareform|sortrows|sort|slicesample|skewness|silhouette|signtest|signrank|setlabels|set|segment|scatterhist|sampsizepwr|runstest|rstool|rsmdemo|rowexch|rotatefactors|robustfit|robustdemo|risk|ridge|replacedata|reorderlevels|regstats|regress|refline|refcurve|rcoplot|raylstat|raylrnd|raylpdf|raylinv|raylfit|raylcdf|ranksum|range|randtool|randsample|random|randg|quantile|qqplot|prune|procrustes|probplot|princomp|prctile|posterior|polyval|polytool|polyfit|polyconf|poisstat|poissrnd|poisspdf|poissinv|poissfit|poisscdf|perms|pearsrnd|pdist|pdf|pcares|pcacov|partialcorr|paretotails|pareto|parent|parallelcoords|ordinal|numnodes|nsegments|normstat|normspec|normrnd|normplot|normpdf|normlike|norminv|normfit|normcdf|nominal|nodesize|nodeprob|nodeerr|nlpredci|nlparci|nlintool|nlinfit|ncx2stat|ncx2rnd|ncx2pdf|ncx2inv|ncx2cdf|nctstat|nctrnd|nctpdf|nctinv|nctcdf|ncfstat|ncfrnd|ncfpdf|ncfinv|ncfcdf|nbinstat|nbinrnd|nbinpdf|nbininv|nbinfit|nbincdf|nanvar|nansum|nanstd|nanmin|nanmedian|nanmean|nanmax|nancov|mvtrnd|mvtpdf|mvtcdf|mvregresslike|mvregress|mvnrnd|mvnpdf|mvncdf|multivarichart|multcompare|moment|mode|mnrval|mnrnd|mnrfit|mnpdf|mlecov|mle|mhsample|mergelevels|median|mean|mdscale|manovacluster|manova1|maineffectsplot|mahal|mad|lsqnonneg|lsline|lscov|lowerparams|lognstat|lognrnd|lognpdf|lognlike|logninv|lognfit|logncdf|linkage|linhyptest|lillietest|lhsnorm|lhsdesign|leverage|levelcounts|kurtosis|kstest2|kstest|ksdensity|kruskalwallis|kmeans|join|johnsrnd|jbtest|jackknife|iwishrnd|isundefined|ismember|islevel|isbranch|iqr|invpred|interactionplot|inconsistent|icdf|hygestat|hygernd|hygepdf|hygeinv|hygecdf|hougen|hmmviterbi|hmmtrain|hmmgenerate|hmmestimate|hmmdecode|histfit|hist3|hist|harmmean|hadamard|gscatter|grpstats|grp2idx|gpstat|gprnd|gppdf|gplotmatrix|gplike|gpinv|gpfit|gpcdf|gname|gmdistribution|glyphplot|glmval|glmfit|gline|gevstat|gevrnd|gevpdf|gevlike|gevinv|gevfit|gevcdf|getlabels|get|geostat|geornd|geopdf|geomean|geoinv|geocdf|gamstat|gamrnd|gampdf|gamlike|gaminv|gamfit|gamcdf|gagerr|fullfact|fsurfht|fstat|frnd|friedman|fracfactgen|fracfact|fpdf|fit|finv|ff2n|fcdf|factoran|expstat|exprnd|exppdf|explike|expinv|expfit|expcdf|evstat|evrnd|evpdf|evlike|evinv|evfit|evcdf|eval|errorbar|ecdfhist|ecdf|dwtest|dummyvar|droplevels|disttool|dfittool|dendrogram|dcovary|daugment|datasetfun|dataset|cutvar|cuttype|cutpoint|cutcategories|crosstab|coxphfit|cov|corrcov|corrcoef|corr|cordexch|copulastat|copularnd|copulapdf|copulaparam|copulafit|copulacdf|cophenet|controlrules|controlchart|combnk|cmdscale|clusterdata|cluster|classregtree|classprob|classify|classcount|cholcov|children|chi2stat|chi2rnd|chi2pdf|chi2inv|chi2gof|chi2cdf|cdfplot|cdf|ccdesign|casewrite|caseread|capaplot|capability|canoncorr|candgen|candexch|boxplot|boundary|bootstrp|bootci|biplot|binostat|binornd|binopdf|binoinv|binofit|binocdf|betastat|betarnd|betapdf|betalike|betainv|betafit|betacdf|bbdesign|barttest|aoctool|ansaribradley|anovan|anova2|anova1|andrewsplot|addlevels|addedvarplot)\b
      comment: Matlab statistics toolbox
      scope: support.function.toolbox.statistics.matlab
  matlab_support_toolbox_symbolic_math:
    - match: \b(ztrans|zeta|vpa|uint8|uint64|uint32|uint16|triu|tril|taylortool|taylor|symsum|syms|sym2poly|sym|svd|subs|subexpr|sort|solve|size|sinint|single|simplify|simple|rsums|rref|round|real|rank|quorem|procread|pretty|poly2sym|poly|numden|null|mod|mhelp|mfunlist|mfun|mapleinit|maple|log2|log10|limit|latex|laplace|lambertw|jordan|jacobian|iztrans|inv|int8|int64|int32|int16|int|imag|ilaplace|ifourier|hypergeom|horner|heaviside|funtool|frac|fourier|fortran|floor|fix|finverse|findsym|factor|ezsurfc|ezsurf|ezpolar|ezplot3|ezplot|ezmeshc|ezmesh|ezcontourf|ezcontour|expm|expand|eq|eig|dsolve|double|dirac|digits|diff|diag|det|cosint|conj|compose|colspace|collect|coeffs|ceil|ccode)\b
      comment: Matlab symbolic math toolbox
      scope: support.function.toolbox.symbolic-math.matlab
  matlab_support_toolbox_system_identification:
    - match: \b(zpkdata|zpk|wavenet|view|unitgain|treepartition|timestamp|tfdata|tf|struc|step|ssdata|ss|spafdr|spa|size|simsd|sim|sigmoidnet|setstruc|setpname|setpar|setinit|set|selstruc|segment|saturation|rplr|rpem|roe|resid|resample|realdata|rbj|rarx|rarmax|pzmap|pwlinear|present|predict|polyreg|polydata|poly1d|plot|pexcit|pem|pe|oe|nyquist|nuderst|noisecnv|nlhw|nlarx|nkshift|neuralnet|n4sid|misdata|midprefs|merge|lintan|linear|linapp|ivx|ivstruc|ivar|iv4|isreal|init|impulse|ifft|idss|idresamp|idproc|idpoly|idnlmodel|idnlhw|idnlgrey|idnlarx|idmodel|idmdlsim|idinput|idgrey|idfrd|idfilt|ident|iddata|idarx|getreg|getpar|getinit|getexp|get|fselect|freqresp|frd|fpe|fft|ffplot|feedback|fcat|evaluate|etfe|diff|detrend|delayest|deadzone|d2c|customreg|customnet|cra|covf|compare|c2d|bode|bj|balred|arxstruc|arxdata|arx|armax|ar|aic|advice|addreg|EstimationInfo)\b
      comment: Matlab system identification toolbox
      scope: support.function.toolbox.system-identification.matlab
  matlab_support_toolbox_virtual_reality:
    - match: \b(vrworld|vrwhos|vrwho|vrview|vrspacemouse|vrsetpref|vrrotvec2mat|vrrotvec|vrrotmat2vec|vrplay|vrori2dir|vrnode|vrlib|vrjoystick|vrinstall|vrgetpref|vrfigure|vrdrawnow|vrdir2ori|vrclose|vrclear)\b
      comment: Matlab virtual reality toolbox
      scope: support.function.toolbox.virtual-reality.matlab
  matlab_support_toolbox_wavelet:
    - match: \b(wvarchg|wtreemgr|wthrmngr|wthresh|wthcoef2|wthcoef|wtbxmngr|wtbo|wscalogram|write|wrev|wrcoef2|wrcoef|wpviewcf|wptree|wpthcoef|wpsplt|wprec2|wprec|wprcoef|wpjoin|wpfun|wpdencmp|wpdec2|wpdec|wpcutree|wpcoef|wpbmpen|wp2wtree|wnoisest|wnoise|wmulden|wmspca|wmaxlev|wkeep|wfusmat|wfusimg|wfilters|wfbmesti|wfbm|wextend|wentropy|wenergy2|wenergy|wdencmp|wden|wdcenergy|wdcbm2|wdcbm|wcodemat|wbmpen|waverec2|waverec|wavenames|wavemngr|wavemenu|waveinfo|wavefun2|wavefun|wavedemo|wavedec2|wavedec|wave2lp|upwlev2|upwlev|upcoef2|upcoef|treeord|treedpth|tnodes|thselect|symwavf|symaux|swt2|swt|shanwavf|set|scal2frq|readtree|read|rbiowavf|qmf|plot|pat2cwav|orthfilt|ntree|ntnode|noleaves|nodesplt|nodepar|nodejoin|nodedesc|nodeasc|mswthresh|mswden|mswcmptp|mswcmpscr|mswcmp|morlet|meyeraux|meyer|mexihat|mdwtrec|mdwtdec|mdwtcluster|lwtcoef2|lwtcoef|lwt2|lwt|lsinfo|ls2filt|liftwave|liftfilt|leaves|laurpoly|laurmat|iswt2|iswt|istnode|isnode|intwave|ind2depo|ilwt2|ilwt|idwt2|idwt|get|gauswavf|filt2ls|fbspwavf|entrupd|dyadup|dyaddown|dwtmode|dwt2|dwt|dtree|drawtree|displs|disp|detcoef2|detcoef|depo2ind|ddencmp|dbwavf|dbaux|cwt|coifwavf|cmorwavf|chgwdeccfs|cgauwavf|cfs2wpt|centfrq|bswfun|biorwavf|biorfilt|besttree|bestlevt|appcoef2|appcoef|allnodes|addlift)\b
      comment: Matlab wavelet toolbox
      scope: support.function.toolbox.wavelet.matlab
  matlab_variable_function:
    - match: \b(nargin|nargout|varargin|varargout)\b
      comment: MATLAB variables
      scope: variable.other.function.matlab
  matlab_oop:
    - match: \b(classdef)\b
      scope: keyword.other.oop.matlab
      push:
        - meta_scope: meta.classdef.matlab
        - match: \(
          scope: punctuation.definition.properties.begin.matlab
          push:
            - meta_scope: meta.properties.matlab
            - match: \)
              scope: punctuation.definition.properties.end.matlab
              pop: true
            - match: ','
              scope: punctuation.separator.matlab
            - match: \b(Abstract|AllowedSubclasses|ConstructOnLoad|HandleCompatible|Hidden|InferiorClasses|Sealed)\s*(=)
              captures:
                1: variable.parameter.matlab
                2: keyword.operator.symbols.matlab
            - match: \b(false|true)\b
              scope: constant.language.matlab
        - match : \b(\w+)\b(?:\s*(<)\s*(\w+))?
          captures:
            1: entity.name.class.matlab
            2: punctuation.definition.inheritance.matlab
            3: entity.other.inherited-class.matlab
          pop: true
    - match: \b(properties)\s+(\()
      captures:
        1: keyword.other.oop.matlab
        2: punctuation.definition.properties.begin.matlab
      push:
        - match: \)
          scope: punctuation.definition.properties.end.matlab
          pop: true
        - match: ','
          scope: punctuation.separator.matlab
        - match: \b(AbortSet|Abstract|Access|Constant|Dependent|GetAccess|GetObservable|Hidden|NonCopyable|SetAccess|SetObservable|Transient)\s*(=)
          captures:
            1: variable.parameter.matlab
            2: keyword.operator.symbols.matlab
        - match: \b(false|true|public|protected|private)\b
          scope: constant.language.matlab
    - match: \b(properties|events|enumeration)\b
      scope: keyword.other.oop.matlab
  not_equal_invalid:
    - match: \s*!=\s*
      comment: Not equal is written ~= not !=.
      scope: invalid.illegal.invalid-inequality.matlab
  number:
    - match: '\d*\.?\d+([eE][+-]?\d)?([0-9&&[^\.]])*(i|j)?\b'
      comment: "Valid numbers: 1, .1, 1.1, .1e1, 1.1e1, 1e1, 1i, 1j, 1e2j"
      scope: constant.numeric.matlab
  matlab-operators:
    - match: \s*(==|~=|~|>|>=|<|<=|=|&|&&|:|\||\|\||\+|-|\*|\.\*|/|\./|\\|\.\\|\^|\.\^)\s*
      comment: Operator symbols
      scope: keyword.operator.symbols.matlab
  parens:
    - match: \(
      scope: punctuation.section.parens.begin.matlab
      push:
        - meta_scope: meta.parens.matlab
        - match: \)
          scope: punctuation.section.parens.end.matlab
          # pop: true
          set: transpose_post_parens
        - include: allofem
        - include: end_in_parens
  special_characters:
    - match: '((\%([\+\-0]?\d{0,3}(\.\d{1,3})?)(c|d|e|E|f|g|G|s|((b|t)?(o|u|x|X))))|\%\%|\\(b|f|n|r|t|\\))'
      comment: Operator symbols
      scope: constant.character.escape.matlab
  string:
    - match: ''''
      scope: punctuation.definition.string.begin.matlab
      push:
        - meta_scope: string.quoted.single.matlab
        - match: '''(?=(\]|\)|\}|=|~|<|>|&|\||-|\+|\*|\.|\^|\||\s|;|:|,))'
          scope: punctuation.definition.string.end.matlab
          pop: true
        - include: escaped_quote
        - include: unescaped_quote
        - include: special_characters
    - match: '"'
      scope: punctuation.definition.string.begin.matlab
      push:
        - meta_scope: string.quoted.double.matlab
        - match: '"'
          scope: punctuation.definition.string.end.matlab
          pop: true
  transpose:
    - match: \b({{id}})(\.?')
      captures:
        1 : meta.variable.other.valid.matlab
        2 : keyword.operator.transpose.matlab
  transpose_post_parens:
    - meta_scope: toto
    - match: '(\.?'')'
      captures:
        1 : keyword.operator.transpose.matlab
      pop: true
    - match: ''
      pop: true
  unescaped_quote:
    - match: "'(?=.)"
      scope: invalid.illegal.unescaped-quote.matlab
  variable:
    - match: '\b{{id}}\b'
      comment: Valid variable. Added meta to disable hilightinh
      scope: meta.variable.other.valid.matlab
  variable_assignment:
    - match: '=\s*\.{0,2}\s*;?\s*$\n?'
      comment: Incomplete variable assignment.
      scope: invalid.illegal.incomplete-variable-assignment.matlab
  variable_invalid:
    - match: '\b(_\w|\d+[_a-df-zA-DF-Z])\w*\b'
      comment: No variables or function names can start with a number or an underscore.
      scope: invalid.illegal.invalid-variable-name.matlab

  rlang:
    - include: roxygen
    - include: comments
    - include: r-constants
    - include: keywords
    - include: storage-types
    - include: r-strings
    - include: r-brackets
    - include: function-declarations
    - include: lambda-functions
    - include: r-builtin-functions
    - include: r-function-calls
    - include: general-variables

  r-function-calls:
    - match: (?:\b|(?<=\.))({{var}})\s*(\()
      captures:
        1: variable.function.r
        2: punctuation.section.parens.begin.r
      push: function-parameters

  function-parameters:
    - meta_scope: meta.function-call.r
    - meta_content_scope: meta.function-call.parameters.r
    - match: '{{var}}(?=\s*=[^=])'
      scope: variable.parameter.r
    - match: '(?==)'
      push:
        - include: rlang
        - match: (?=[,)])
          pop: true
    - match: ','
      scope: punctuation.separator.parameters.r
    - match: \)
      scope: punctuation.section.parens.end.r
      pop: true
    - include: rlang

  r-constants:
    - match: \b(pi|letters|LETTERS|month\.abb|month\.name)\b
      scope: support.constant.misc.r
    - match: \b(TRUE|FALSE|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_|Inf|NaN)\b
      scope: constant.language.r
    - match: \b0(x|X)[0-9a-fA-F]+i\b
      scope: constant.numeric.imaginary.hexadecimal.r
    - match: \b[0-9]+\.?[0-9]*(?:(e|E)(\+|-)?[0-9]+)?i\b
      scope: constant.numeric.imaginary.decimal.r
    - match: \.[0-9]+(?:(e|E)(\+|-)?[0-9]+)?i\b
      scope: constant.numeric.imaginary.decimal.r
    - match: \b0(x|X)[0-9a-fA-F]+L\b
      scope: constant.numeric.integer.hexadecimal.r
    - match: \b(?:[0-9]+\.?[0-9]*)L\b
      scope: constant.numeric.integer.decimal.r
    - match: \b0(x|X)[0-9a-fA-F]+\b
      scope: constant.numeric.float.hexadecimal.r
    - match: \b[0-9]+\.?[0-9]*(?:(e|E)(\+|-)?[0-9]+)?\b
      scope: constant.numeric.float.decimal.r
    - match: \.[0-9]+(?:(e|E)(\+|-)?[0-9]+)?\b
      scope: constant.numeric.float.decimal.r

  general-variables:
    - match: '{{var}}'

  keywords:
    - match: \b(break|next|repeat|else|in)\b
      scope: keyword.control.r
    - match: \b(if|for|return|while|invisible)\b(?=\s*\()
      scope: keyword.control.r
    - match: (\-|\+|\*|\/|%\/%|%%|%\*%|%o%|%x%|\^)
      scope: keyword.operator.arithmetic.r
    - match: (=|<-|<<-|->|->>)
      scope: keyword.operator.assignment.r
    - match: (==|!=|<>|<|>|<=|>=)
      scope: keyword.operator.comparison.r
    - match: (!|&{1,2}|[|]{1,2})
      scope: keyword.operator.logical.r
    - match: (%in%|:=|%between%|%chin%|%like%|%\+%|%\+replace%|%:%|%do%|%dopar%|%>%|%<>%|%T>%|%\$%)
      scope: keyword.operator.other.r
    - match: (:::?)
      scope: punctuation.accessor.colons.r
    - match: (\.\.\.|\$|:|\~|@)
      scope: keyword.other.r
    - match: ;
      scope: punctuation.terminator.semicolon.r

  storage-types:
    - match: \b(character|complex|double|expression|integer|list|logical|numeric|single|raw)\b(\s*\()
      captures:
        1: storage.type.r
      push: r-function-parameters

  r-strings:
    - match: '"'
      scope: punctuation.definition.string.begin.r
      push:
        - meta_scope: string.quoted.double.r
        - match: \\.
          scope: constant.character.escape.r
        - match: '"'
          scope: punctuation.definition.string.end.r
          pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.r
      push:
        - meta_scope: string.quoted.single.r
        - match: \\.
          scope: constant.character.escape.r
        - match: "'"
          scope: punctuation.definition.string.end.r
          pop: true

  r-brackets:
    - match: \(
      scope: punctuation.section.parens.begin.r
      push:
        - match: \)
          scope: punctuation.section.parens.end.r
          pop: true
        - include: main
    - match: \[(?!\[)
      scope: meta.item-access.r punctuation.section.brackets.single.begin.r
      push:
        - meta_content_scope: meta.item-access.r meta.item-access.arguments.r
        - match: \]
          scope: meta.item-access.r punctuation.section.brackets.single.end.r
          pop: true
        - match: ','
          scope: punctuation.separator.parameters.r
        - include: main
    - match: \[\[
      scope: meta.item-access.r punctuation.section.brackets.double.begin.r
      push:
        - meta_content_scope: meta.item-access.r meta.item-access.arguments.r
        - match: \]\]
          scope: meta.item-access.r punctuation.section.brackets.double.end.r
          pop: true
        - match: ','
          scope: punctuation.separator.parameters.r
        - include: main
    - match: \{
      scope: punctuation.section.braces.begin.r
      push:
        - match: \}
          scope: punctuation.section.braces.end.r
          pop: true
        - include: main

  function-declarations:
    - match: ({{var}})\s*(<<?-|=)\s*(?=function\s*\()
      scope: meta.function.r
      captures:
        1: entity.name.function.r
        2: keyword.operator.assignment.r
        3: keyword.control.r
      push:
          - include: lambda-functions
          - match: ''
            pop: true

  lambda-functions:
    - match: \b(function)\s*(\()
      captures:
        1: keyword.control.r
        2: punctuation.section.parens.begin.r
      push:
        - meta_scope: meta.function.r
        - meta_content_scope: meta.function.parameters.r
        - include: comments
        - match: '{{var}}'
          scope: variable.parameter.r
        - match: '(?==)'
          push:
            - include: rlang
            - match: (?=[,)])
              pop: true
        - match: ','
          scope: punctuation.separator.parameters.r
        - match: \)
          scope: punctuation.section.parens.end.r
          pop: true
    - match: (?:\s*|\s*[\r\n]+)\{
      push:
        - include: rlang
        - match: \}
          pop: true

  r-function-call:
    - match: (?:\b|(?=\.))({{var}})\s*(\()
      captures:
        1: variable.function.r
        2: punctuation.section.parens.begin.r
      push: r-function-parameters

  r-function-parameters:
    - meta_scope: meta.function-call.r
    - meta_content_scope: meta.function-call.parameters.r
    - match: '{{var}}(?=\s*=[^=])'
      scope: variable.parameter.r
    - match: '(?==)'
      push:
        - include: main
        - match: (?=[,)])
          pop: true
    - match: ','
      scope: punctuation.separator.parameters.r
    - match: \)
      scope: punctuation.section.parens.end.r
      pop: true
    - include: main

  roxygen:
    - match: ^(#')\s*
      captures:
        1: punctuation.definition.comment.r
      push:
        - meta_scope: comment.line.roxygen.r
        - match: (@param)\s*({{var}})
          captures:
            1: keyword.other.r
            2: variable.parameter.r
        - match: '@[a-zA-Z0-9]+'
          scope: keyword.other.r
        - match: $\n?
          pop: true

  # the builtin-functions are generated by using this
  # paste(sub("\\.", "\\\\\\\\.", Filter(function(x) grepl("^[a-zA-Z\\._][0-9a-zA-Z\\._]*$", x), unclass(lsf.str(envir = asNamespace(pkg))))), collapse = "|")

  r-builtin-functions:
    # base
    - match: \b(abbreviate|abs|acos|acosh|addNA|addTaskCallback|agrep|agrepl|alist|all|all\.equal|all\.equal.character|all\.equal.default|all\.equal.environment|all\.equal.envRefClass|all\.equal.factor|all\.equal.formula|all\.equal.language|all\.equal.list|all\.equal.numeric|all\.equal.POSIXt|all\.equal.raw|all\.names|all\.vars|any|anyDuplicated|anyDuplicated\.array|anyDuplicated\.data.frame|anyDuplicated\.default|anyDuplicated\.matrix|anyNA|anyNA\.numeric_version|anyNA\.POSIXlt|aperm|aperm\.default|aperm\.table|append|apply|Arg|args|array|arrayInd|as\.array|as\.array.default|as\.call|as\.character|as\.character.condition|as\.character.Date|as\.character.default|as\.character.error|as\.character.factor|as\.character.hexmode|as\.character.numeric_version|as\.character.octmode|as\.character.POSIXt|as\.character.srcref|as\.complex|as\.data.frame|as\.data.frame.array|as\.data.frame.AsIs|as\.data.frame.character|as\.data.frame.complex|as\.data.frame.data.frame|as\.data.frame.Date|as\.data.frame.default|as\.data.frame.difftime|as\.data.frame.factor|as\.data.frame.integer|as\.data.frame.list|as\.data.frame.logical|as\.data.frame.matrix|as\.data.frame.model.matrix|as\.data.frame.noquote|as\.data.frame.numeric|as\.data.frame.numeric_version|as\.data.frame.ordered|as\.data.frame.POSIXct|as\.data.frame.POSIXlt|as\.data.frame.raw|as\.data.frame.table|as\.data.frame.ts|as\.data.frame.vector|as\.Date|as\.Date.character|as\.Date.date|as\.Date.dates|as\.Date.default|as\.Date.factor|as\.Date.numeric|as\.Date.POSIXct|as\.Date.POSIXlt|as\.difftime|as\.double|as\.double.difftime|as\.double.POSIXlt|as\.environment|as\.expression|as\.expression.default|as\.factor|as\.function|as\.function.default|as\.hexmode|as\.integer|as\.list|as\.list.data.frame|as\.list.Date|as\.list.default|as\.list.environment|as\.list.factor|as\.list.function|as\.list.numeric_version|as\.list.POSIXct|as\.logical|as\.logical.factor|as\.matrix|as\.matrix.data.frame|as\.matrix.default|as\.matrix.noquote|as\.matrix.POSIXlt|as\.name|as\.null|as\.null.default|as\.numeric|as\.numeric_version|as\.octmode|as\.ordered|as\.package_version|as\.pairlist|as\.POSIXct|as\.POSIXct.date|as\.POSIXct.Date|as\.POSIXct.dates|as\.POSIXct.default|as\.POSIXct.numeric|as\.POSIXct.POSIXlt|as\.POSIXlt|as\.POSIXlt.character|as\.POSIXlt.date|as\.POSIXlt.Date|as\.POSIXlt.dates|as\.POSIXlt.default|as\.POSIXlt.factor|as\.POSIXlt.numeric|as\.POSIXlt.POSIXct|as\.qr|as\.raw|as\.single|as\.single.default|as\.symbol|as\.table|as\.table.default|as\.vector|as\.vector.factor|asin|asinh|asNamespace|asS3|asS4|assign|atan|atan2|atanh|attach|attachNamespace|attr|attr\.all.equal|attributes|autoload|autoloader|backsolve|baseenv|basename|besselI|besselJ|besselK|besselY|beta|bindingIsActive|bindingIsLocked|bindtextdomain|bitwAnd|bitwNot|bitwOr|bitwShiftL|bitwShiftR|bitwXor|body|bquote|break|browser|browserCondition|browserSetDebug|browserText|builtins|by|by\.data.frame|by\.default|bzfile|c|c\.Date|c\.difftime|c\.noquote|c\.numeric_version|c\.POSIXct|c\.POSIXlt|c\.warnings|call|callCC|capabilities|casefold|cat|cbind|cbind\.data.frame|ceiling|char\.expand|character|charmatch|charToRaw|chartr|check_tzones|chkDots|chol|chol\.default|chol2inv|choose|class|clearPushBack|close|close\.connection|close\.srcfile|close\.srcfilealias|closeAllConnections|col|colMeans|colnames|colSums|commandArgs|comment|complex|computeRestarts|conditionCall|conditionCall\.condition|conditionMessage|conditionMessage\.condition|conflicts|Conj|contributors|cos|cosh|cospi|crossprod|Cstack_info|cummax|cummin|cumprod|cumsum|curlGetHeaders|cut|cut\.Date|cut\.default|cut\.POSIXt|data\.class|data\.frame|data\.matrix|date|debug|debuggingState|debugonce|default\.stringsAsFactors|delayedAssign|deparse|det|detach|determinant|determinant\.matrix|dget|diag|diff|diff\.Date|diff\.default|diff\.difftime|diff\.POSIXt|difftime|digamma|dim|dim\.data.frame|dimnames|dimnames\.data.frame|dir|dir\.create|dir\.exists|dirname|do\.call|dontCheck|double|dput|dQuote|drop|droplevels|droplevels\.data.frame|droplevels\.factor|dump|duplicated|duplicated\.array|duplicated\.data.frame|duplicated\.default|duplicated\.matrix|duplicated\.numeric_version|duplicated\.POSIXlt|duplicated\.warnings|dyn\.load|dyn\.unload|dynGet|eapply|eigen|emptyenv|enc2native|enc2utf8|encodeString|Encoding|endsWith|enquote|env\.profile|environment|environmentIsLocked|environmentName|eval|eval\.parent|evalq|exists|exp|expand\.grid|expm1|expression|extSoftVersion|factor|factorial|fifo|file|file\.access|file\.append|file\.choose|file\.copy|file\.create|file\.exists|file\.info|file\.link|file\.mode|file\.mtime|file\.path|file\.remove|file\.rename|file\.show|file\.size|file\.symlink|Filter|Find|find\.package|findInterval|findPackageEnv|findRestart|floor|flush|flush\.connection|for|force|forceAndCall|formals|format|format\.AsIs|format\.data.frame|format\.Date|format\.default|format\.difftime|format\.factor|format\.hexmode|format\.info|format\.libraryIQR|format\.numeric_version|format\.octmode|format\.packageInfo|format\.POSIXct|format\.POSIXlt|format\.pval|format\.summaryDefault|formatC|formatDL|forwardsolve|function|gamma|gc|gc\.time|gcinfo|gctorture|gctorture2|get|get0|getAllConnections|getCallingDLL|getCallingDLLe|getConnection|getDLLRegisteredRoutines|getDLLRegisteredRoutines\.character|getDLLRegisteredRoutines\.DLLInfo|getElement|geterrmessage|getExportedValue|getHook|getLoadedDLLs|getNamespace|getNamespaceExports|getNamespaceImports|getNamespaceInfo|getNamespaceName|getNamespaceUsers|getNamespaceVersion|getNativeSymbolInfo|getOption|getRversion|getSrcLines|getTaskCallbackNames|gettext|gettextf|getwd|gl|globalenv|gregexpr|grep|grepl|grepRaw|grouping|gsub|gzcon|gzfile|I|iconv|iconvlist|icuGetCollate|icuSetCollate|identical|identity|if|ifelse|Im|importIntoEnv|inherits|integer|interaction|interactive|intersect|intToBits|intToUtf8|inverse\.rle|invisible|invokeRestart|invokeRestartInteractively|is\.array|is\.atomic|is\.call|is\.character|is\.complex|is\.data.frame|is\.double|is\.element|is\.environment|is\.expression|is\.factor|is\.finite|is\.function|is\.infinite|is\.integer|is\.language|is\.list|is\.loaded|is\.logical|is\.matrix|is\.na|is\.na.data.frame|is\.na.numeric_version|is\.na.POSIXlt|is\.name|is\.nan|is\.null|is\.numeric|is\.numeric_version|is\.numeric.Date|is\.numeric.difftime|is\.numeric.POSIXt|is\.object|is\.ordered|is\.package_version|is\.pairlist|is\.primitive|is\.qr|is\.R|is\.raw|is\.recursive|is\.single|is\.symbol|is\.table|is\.unsorted|is\.vector|isatty|isBaseNamespace|isdebugged|isIncomplete|isNamespace|isNamespaceLoaded|ISOdate|ISOdatetime|isOpen|isRestart|isS4|isSeekable|isSymmetric|isSymmetric\.matrix|isTRUE|jitter|julian|julian\.Date|julian\.POSIXt|kappa|kappa\.default|kappa\.lm|kappa\.qr|kronecker|l10n_info|La_library|La_version|La\.svd|labels|labels\.default|lapply|lazyLoad|lazyLoadDBexec|lazyLoadDBfetch|lbeta|lchoose|length|length\.POSIXlt|lengths|levels|levels\.default|lfactorial|lgamma|libcurlVersion|library|library\.dynam|library\.dynam.unload|licence|license|list|list\.dirs|list\.files|list2env|load|loadedNamespaces|loadingNamespaceInfo|loadNamespace|local|lockBinding|lockEnvironment|log|log10|log1p|log2|logb|logical|lower\.tri|ls|make\.names|make\.unique|makeActiveBinding|Map|mapply|margin\.table|mat\.or.vec|match|match\.arg|match\.call|match\.fun|Math\.data.frame|Math\.Date|Math\.difftime|Math\.factor|Math\.POSIXt|matrix|max|max\.col|mean|mean\.Date|mean\.default|mean\.difftime|mean\.POSIXct|mean\.POSIXlt|mem\.limits|memCompress|memDecompress|memory\.profile|merge|merge\.data.frame|merge\.default|message|mget|min|missing|Mod|mode|months|months\.Date|months\.POSIXt|names|names\.POSIXlt|namespaceExport|namespaceImport|namespaceImportClasses|namespaceImportFrom|namespaceImportMethods|nargs|nchar|ncol|NCOL|Negate|new\.env|next|NextMethod|ngettext|nlevels|noquote|norm|normalizePath|nrow|NROW|numeric|numeric_version|nzchar|objects|oldClass|OlsonNames|on\.exit|open|open\.connection|open\.srcfile|open\.srcfilealias|open\.srcfilecopy|Ops\.data.frame|Ops\.Date|Ops\.difftime|Ops\.factor|Ops\.numeric_version|Ops\.ordered|Ops\.POSIXt|options|order|ordered|outer|package_version|packageEvent|packageHasNamespace|packageStartupMessage|packBits|pairlist|parent\.env|parent\.frame|parse|parseNamespaceFile|paste|paste0|path\.expand|path\.package|pcre_config|pipe|pmatch|pmax|pmax\.int|pmin|pmin\.int|polyroot|pos\.to.env|Position|pretty|pretty\.default|prettyNum|print|print\.AsIs|print\.by|print\.condition|print\.connection|print\.data.frame|print\.Date|print\.default|print\.difftime|print\.Dlist|print\.DLLInfo|print\.DLLInfoList|print\.DLLRegisteredRoutines|print\.eigen|print\.factor|print\.function|print\.hexmode|print\.libraryIQR|print\.listof|print\.NativeRoutineList|print\.noquote|print\.numeric_version|print\.octmode|print\.packageInfo|print\.POSIXct|print\.POSIXlt|print\.proc_time|print\.restart|print\.rle|print\.simple.list|print\.srcfile|print\.srcref|print\.summary.table|print\.summaryDefault|print\.table|print\.warnings|prmatrix|proc\.time|prod|prop\.table|provideDimnames|psigamma|pushBack|pushBackLength|q|qr|qr\.coef|qr\.default|qr\.fitted|qr\.Q|qr\.qty|qr\.qy|qr\.R|qr\.resid|qr\.solve|qr\.X|quarters|quarters\.Date|quarters\.POSIXt|quit|quote|R_system_version|R\.home|R\.Version|range|range\.default|rank|rapply|raw|rawConnection|rawConnectionValue|rawShift|rawToBits|rawToChar|rbind|rbind\.data.frame|rcond|Re|read\.dcf|readBin|readChar|readline|readLines|readRDS|readRenviron|Recall|Reduce|reg\.finalizer|regexec|regexpr|registerS3method|registerS3methods|regmatches|remove|removeTaskCallback|rep|rep_len|rep\.Date|rep\.factor|rep\.int|rep\.numeric_version|rep\.POSIXct|rep\.POSIXlt|repeat|replace|replicate|require|requireNamespace|restartDescription|restartFormals|retracemem|return|returnValue|rev|rev\.default|rle|rm|RNGkind|RNGversion|round|round\.Date|round\.POSIXt|row|row\.names|row\.names.data.frame|row\.names.default|rowMeans|rownames|rowsum|rowsum\.data.frame|rowsum\.default|rowSums|sample|sample\.int|sapply|save|save\.image|saveRDS|scale|scale\.default|scan|search|searchpaths|seek|seek\.connection|seq|seq_along|seq_len|seq\.Date|seq\.default|seq\.int|seq\.POSIXt|sequence|serialize|set\.seed|setdiff|setequal|setHook|setNamespaceInfo|setSessionTimeLimit|setTimeLimit|setwd|showConnections|shQuote|sign|signalCondition|signif|simpleCondition|simpleError|simpleMessage|simpleWarning|simplify2array|sin|single|sinh|sink|sink\.number|sinpi|slice\.index|socketConnection|socketSelect|solve|solve\.default|solve\.qr|sort|sort\.default|sort\.int|sort\.list|sort\.POSIXlt|source|split|split\.data.frame|split\.Date|split\.default|split\.POSIXct|sprintf|sqrt|sQuote|srcfile|srcfilealias|srcfilecopy|srcref|standardGeneric|startsWith|stderr|stdin|stdout|stop|stopifnot|storage\.mode|strftime|strptime|strrep|strsplit|strtoi|strtrim|structure|strwrap|sub|subset|subset\.data.frame|subset\.default|subset\.matrix|substitute|substr|substring|sum|summary|summary\.connection|summary\.data.frame|Summary\.data.frame|summary\.Date|Summary\.Date|summary\.default|Summary\.difftime|summary\.factor|Summary\.factor|summary\.matrix|Summary\.numeric_version|Summary\.ordered|summary\.POSIXct|Summary\.POSIXct|summary\.POSIXlt|Summary\.POSIXlt|summary\.proc_time|summary\.srcfile|summary\.srcref|summary\.table|suppressMessages|suppressPackageStartupMessages|suppressWarnings|svd|sweep|switch|sys\.call|sys\.calls|Sys\.chmod|Sys\.Date|sys\.frame|sys\.frames|sys\.function|Sys\.getenv|Sys\.getlocale|Sys\.getpid|Sys\.glob|Sys\.info|sys\.load.image|Sys\.localeconv|sys\.nframe|sys\.on.exit|sys\.parent|sys\.parents|Sys\.readlink|sys\.save.image|Sys\.setenv|Sys\.setFileTime|Sys\.setlocale|Sys\.sleep|sys\.source|sys\.status|Sys\.time|Sys\.timezone|Sys\.umask|Sys\.unsetenv|Sys\.which|system|system\.file|system\.time|system2|t|t\.data.frame|t\.default|table|tabulate|tan|tanh|tanpi|tapply|taskCallbackManager|tcrossprod|tempdir|tempfile|testPlatformEquivalence|textConnection|textConnectionValue|tolower|topenv|toString|toString\.default|toupper|trace|traceback|tracemem|tracingState|transform|transform\.data.frame|transform\.default|trigamma|trimws|trunc|trunc\.Date|trunc\.POSIXt|truncate|truncate\.connection|try|tryCatch|typeof|unclass|undebug|union|unique|unique\.array|unique\.data.frame|unique\.default|unique\.matrix|unique\.numeric_version|unique\.POSIXlt|unique\.warnings|units|units\.difftime|unix\.time|unlink|unlist|unloadNamespace|unlockBinding|unname|unserialize|unsplit|untrace|untracemem|unz|upper\.tri|url|UseMethod|utf8ToInt|validEnc|validUTF8|vapply|vector|Vectorize|warning|warnings|weekdays|weekdays\.Date|weekdays\.POSIXt|which|which\.max|which\.min|while|with|with\.default|withAutoprint|withCallingHandlers|within|within\.data.frame|within\.list|withRestarts|withVisible|write|write\.dcf|writeBin|writeChar|writeLines|xor|xor\.hexmode|xor\.octmode|xpdrows\.data.frame|xtfrm|xtfrm\.AsIs|xtfrm\.Date|xtfrm\.default|xtfrm\.difftime|xtfrm\.factor|xtfrm\.numeric_version|xtfrm\.POSIXct|xtfrm\.POSIXlt|xtfrm\.Surv|xzfile|zapsmall)\s*(\()
      captures:
        1: support.function.r
      push: r-function-parameters
    # graphics
    - match: \b(abline|arrows|assocplot|axis|Axis|axis\.Date|Axis\.Date|Axis\.default|axis\.POSIXct|Axis\.POSIXt|Axis\.table|axTicks|barplot|barplot\.default|box|boxplot|boxplot\.default|boxplot\.formula|boxplot\.matrix|bxp|cdplot|cdplot\.default|cdplot\.formula|clip|close\.screen|co\.intervals|contour|contour\.default|coplot|curve|dotchart|erase\.screen|filled\.contour|fourfoldplot|frame|grconvertX|grconvertY|grid|hist|hist\.Date|hist\.default|hist\.POSIXt|identify|identify\.default|image|image\.default|layout|layout\.show|lcm|legend|lines|lines\.default|lines\.formula|lines\.histogram|lines\.table|locator|matlines|matplot|matpoints|mosaicplot|mosaicplot\.default|mosaicplot\.formula|mtext|pairs|pairs\.default|pairs\.formula|panel\.smooth|par|persp|persp\.default|pie|piechart|plot|plot\.data.frame|plot\.default|plot\.design|plot\.factor|plot\.formula|plot\.function|plot\.histogram|plot\.new|plot\.raster|plot\.table|plot\.window|plot\.xy|plotHclust|points|points\.default|points\.formula|points\.table|polygon|polypath|rasterImage|rect|rug|screen|segments|smoothScatter|spineplot|spineplot\.default|spineplot\.formula|split\.screen|stars|stem|strheight|stripchart|stripchart\.default|stripchart\.formula|strwidth|sunflowerplot|sunflowerplot\.default|sunflowerplot\.formula|symbols|text|text\.default|text\.formula|title|xinch|xspline|xyinch|yinch)\s*(\()
      captures:
        1: support.function.r
      push: r-function-parameters
    # grDevices
    - match: \b(adjustcolor|anyNA\.raster|as\.graphicsAnnot|as\.matrix.raster|as\.raster|as\.raster.array|as\.raster.character|as\.raster.logical|as\.raster.matrix|as\.raster.numeric|as\.raster.raster|as\.raster.raw|axisTicks|bitmap|bmp|boxplot\.stats|c2to3|cairo_pdf|cairo_ps|cairoVersion|check_for_XQuartz|check_gs_type|check\.options|checkFont|checkFont\.CIDFont|checkFont\.default|checkFont\.Type1Font|checkFontInUse|checkIntFormat|checkQuartzFont|checkX11Font|chromaticAdaptation|chull|CIDFont|cm|cm\.colors|col2rgb|colorConverter|colorRamp|colorRampPalette|colors|colours|contourLines|convertColor|densCols|dev\.capabilities|dev\.capture|dev\.control|dev\.copy|dev\.copy2eps|dev\.copy2pdf|dev\.cur|dev\.displaylist|dev\.flush|dev\.hold|dev\.interactive|dev\.list|dev\.new|dev\.next|dev\.off|dev\.prev|dev\.print|dev\.set|dev\.size|dev2bitmap|devAskNewPage|deviceIsInteractive|embedFonts|extendrange|getGraphicsEvent|getGraphicsEventEnv|graphics\.off|gray|gray\.colors|grey|grey\.colors|grSoftVersion|guessEncoding|hcl|heat\.colors|hsv|initPSandPDFfonts|is\.na.raster|is\.raster|isPDF|jpeg|make\.rgb|matchEncoding|matchEncoding\.CIDFont|matchEncoding\.Type1Font|matchFont|n2mfrow|nclass\.FD|nclass\.scott|nclass\.Sturges|Ops\.raster|palette|pdf|pdf\.options|pdfFonts|pictex|png|postscript|postscriptFonts|prettyDate|print\.colorConverter|print\.raster|print\.recordedplot|print\.RGBcolorConverter|printFont|printFont\.CIDFont|printFont\.Type1Font|printFonts|ps\.options|quartz|quartz\.options|quartz\.save|quartzFont|quartzFonts|rainbow|recordGraphics|recordPalette|recordPlot|replayPlot|restoreRecordedPlot|rgb|rgb2hsv|savePlot|seqDtime|setEPS|setFonts|setGraphicsEventEnv|setGraphicsEventHandlers|setPS|setQuartzFonts|setX11Fonts|svg|terrain\.colors|tiff|topo\.colors|trans3d|trunc_POSIXt|Type1Font|x11|X11|X11\.options|X11Font|X11FontError|X11Fonts|xfig|xy\.coords|xyTable|xyz\.coords)\s*(\()
      captures:
        1: support.function.r
      push: r-function-parameters
    # methods
    - match: \b(addNextMethod|allGenerics|allNames|Arith|as|asMethodDefinition|assignClassDef|assignMethodsMetaData|balanceMethodsList|bind_activation|cacheGenericsMetaData|cacheMetaData|cacheMethod|cacheOnAssign|callGeneric|callNextMethod|canCoerce|cbind|cbind2|checkAtAssignment|checkSlotAssignment|classesToAM|classGeneratorFunction|classLabel|classMetaName|className|coerce|Compare|completeClassDefinition|completeExtends|completeSubclasses|Complex|conformMethod|defaultDumpName|defaultPrototype|dispatchIsInternal|doPrimitiveMethod|dumpMethod|dumpMethods|el|elNamed|empty\.dump|emptyMethodsList|envRefInferField|envRefSetField|evalOnLoad|evalqOnLoad|evalSource|existsFunction|existsMethod|extends|externalRefMethod|finalDefaultMethod|findClass|findFunction|findMethod|findMethods|findMethodSignatures|findUnique|fixPre1\.8|formalArgs|fromNextMethod|functionBody|generic\.skeleton|genericForBasic|getAccess|getAllMethods|getAllSuperClasses|getClass|getClassDef|getClasses|getClassName|getClassPackage|getDataPart|getExtends|getFunction|getGeneric|getGenericFromCall|getGenerics|getGroup|getGroupMembers|getLoadActions|getMethod|getMethods|getMethodsAndAccessors|getMethodsForDispatch|getMethodsMetaData|getPackageName|getProperties|getPrototype|getRefClass|getRefSuperClasses|getSlots|getSubclasses|getValidity|getVirtual|hasArg|hasLoadAction|hasMethod|hasMethods|implicitGeneric|inBasicFuns|inferProperties|inheritedSlotNames|inheritedSubMethodLists|initFieldArgs|initialize|initMethodDispatch|initRefFields|insertClassMethods|insertMethod|insertMethodInEmptyList|insertSource|installClassMethod|is|isBaseFun|isClass|isClassDef|isClassUnion|isGeneric|isGrammarSymbol|isGroup|isMixin|isRematched|isS3Generic|isSealedClass|isSealedMethod|isVirtualClass|isXS3Class|kronecker|languageEl|linearizeMlist|listFromMethods|listFromMlist|loadMethod|Logic|makeClassMethod|makeClassRepresentation|makeEnvRefMethods|makeExtends|makeGeneric|makeMethodsList|makePrototypeFromClassDef|makeStandardGeneric|matchDefaults|matchSignature|Math|Math2|mergeMethods|metaNameUndo|method\.skeleton|MethodAddCoerce|methodSignatureMatrix|MethodsList|MethodsListSelect|methodsPackageMetaName|missingArg|mlistMetaName|multipleClasses|new|newBasic|newClassRepresentation|newEmptyObject|Ops|outerLabels|packageSlot|possibleExtends|print\.MethodsList|printClassRepresentation|printPropertiesList|prohibitGeneric|promptClass|promptMethods|prototype|Quote|rbind|rbind2|reconcilePropertiesAndPrototype|refClassFields|refClassInformation|refClassMethods|refClassPrompt|refObjectClass|registerImplicitGenerics|rematchDefinition|removeClass|removeGeneric|removeMethod|removeMethods|removeMethodsObject|representation|requireMethods|resetClass|resetGeneric|S3Class|S3forS4Methods|S3Part|sealClass|seemsS4Object|selectMethod|selectSuperClasses|setAs|setCacheOnAssign|setClass|setClassUnion|setDataPart|setGeneric|setGenericImplicit|setGroupGeneric|setIs|setLoadAction|setLoadActions|setMethod|setNames|setOldClass|setPackageName|setPrimitiveMethods|setRefClass|setReplaceMethod|setValidity|show|showClass|showClassMethod|showDefault|showExtends|showExtraSlots|showMethods|showMlist|showRefClassDef|signature|SignatureMethod|sigToEnv|slot|slotNames|slotsFromS3|substituteDirect|substituteFunctionArgs|Summary|superClassDepth|superClassMethodName|tableNames|testInheritedMethods|testVirtual|traceOff|traceOn|tryNew|unRematchDefinition|useMTable|validObject|validSlotNames)\s*(\()
      captures:
        1: support.function.r
      push: r-function-parameters
    # stats
    - match: \b(acf|acf2AR|add\.scope|add1|add1\.default|add1\.glm|add1\.lm|add1\.mlm|addmargins|aggregate|aggregate\.data.frame|aggregate\.default|aggregate\.formula|aggregate\.ts|AIC|AIC\.default|AIC\.logLik|alias|alias\.formula|alias\.lm|anova|anova\.glm|anova\.glmlist|anova\.lm|anova\.lmlist|anova\.loess|anova\.mlm|anova\.mlmlist|anova\.nls|anovalist\.nls|ansari\.test|ansari\.test.default|ansari\.test.formula|aov|approx|approxfun|ar|ar\.burg|ar\.burg.default|ar\.burg.mts|ar\.mle|ar\.ols|ar\.yw|ar\.yw.default|ar\.yw.mts|arima|arima\.sim|arima0|arima0\.diag|ARMAacf|ARMAtoMA|as\.data.frame.aovproj|as\.data.frame.ftable|as\.data.frame.logLik|as\.dendrogram|as\.dendrogram.dendrogram|as\.dendrogram.hclust|as\.dist|as\.dist.default|as\.formula|as\.hclust|as\.hclust.default|as\.hclust.dendrogram|as\.hclust.twins|as\.matrix.dist|as\.matrix.ftable|as\.stepfun|as\.stepfun.default|as\.stepfun.isoreg|as\.table.ftable|as\.ts|as\.ts.default|asOneSidedFormula|ave|bandwidth\.kernel|bartlett\.test|bartlett\.test.default|bartlett\.test.formula|BIC|BIC\.default|BIC\.logLik|binom\.test|binomial|biplot|biplot\.default|biplot\.prcomp|biplot\.princomp|Box\.test|bw_pair_cnts|bw\.bcv|bw\.nrd|bw\.nrd0|bw\.SJ|bw\.ucv|C|cancor|case\.names|case\.names.default|case\.names.lm|cbind\.ts|ccf|check_exact|chisq\.test|cmdscale|coef|coef\.aov|coef\.Arima|coef\.default|coef\.listof|coef\.maov|coef\.nls|coefficients|complete\.cases|confint|confint\.default|confint\.glm|confint\.lm|confint\.nls|constrOptim|contr\.helmert|contr\.poly|contr\.SAS|contr\.sum|contr\.treatment|contrasts|convolve|cooks\.distance|cooks\.distance.glm|cooks\.distance.lm|cophenetic|cophenetic\.default|cophenetic\.dendrogram|cor|cor\.test|cor\.test.default|cor\.test.formula|cov|cov\.wt|cov2cor|covratio|cpgram|cut\.dendrogram|cutree|cycle|cycle\.default|cycle\.ts|D|dbeta|dbinom|dcauchy|dchisq|decompose|delete\.response|deltat|deltat\.default|dendrapply|density|density\.default|deriv|deriv\.default|deriv\.formula|deriv3|deriv3\.default|deriv3\.formula|deviance|deviance\.default|deviance\.glm|deviance\.lm|deviance\.mlm|deviance\.nls|dexp|df|df\.kernel|df\.residual|df\.residual.default|df\.residual.nls|dfbeta|dfbeta\.lm|dfbetas|dfbetas\.lm|dffits|dgamma|dgeom|dhyper|diff\.ts|diffinv|diffinv\.default|diffinv\.ts|diffinv\.vector|dist|dlnorm|dlogis|dmultinom|dnbinom|dnorm|dpois|drop\.scope|drop\.terms|drop1|drop1\.default|drop1\.glm|drop1\.lm|drop1\.mlm|dsignrank|dt|dummy\.coef|dummy\.coef.aovlist|dummy\.coef.lm|dunif|dweibull|dwilcox|ecdf|eff\.aovlist|effects|effects\.glm|effects\.lm|embed|end|end\.default|estVar|estVar\.mlm|estVar\.SSD|expand\.model.frame|extractAIC|extractAIC\.aov|extractAIC\.coxph|extractAIC\.glm|extractAIC\.lm|extractAIC\.negbin|extractAIC\.survreg|factanal|factanal\.fit.mle|factor\.scope|family|family\.glm|family\.lm|fft|filter|fisher\.test|fitted|fitted\.default|fitted\.isoreg|fitted\.kmeans|fitted\.nls|fitted\.smooth.spline|fitted\.values|fivenum|fligner\.test|fligner\.test.default|fligner\.test.formula|format_perc|format\.dist|format\.ftable|format\.perc|formula|formula\.character|formula\.data.frame|formula\.default|formula\.formula|formula\.glm|formula\.lm|formula\.nls|formula\.terms|frequency|frequency\.default|friedman\.test|friedman\.test.default|friedman\.test.formula|ftable|ftable\.default|ftable\.formula|Gamma|gaussian|get_all_vars|getCall|getCall\.default|getInitial|getInitial\.default|getInitial\.formula|getInitial\.selfStart|glm|glm\.control|glm\.fit|hasTsp|hat|hatvalues|hatvalues\.lm|hatvalues\.smooth.spline|hclust|heatmap|HL|HoltWinters|hyman_filter|identify\.hclust|influence|influence\.glm|influence\.lm|influence\.measures|integrate|interaction\.plot|inverse\.gaussian|IQR|is\.empty.model|is\.leaf|is\.mts|is\.stepfun|is\.ts|is\.tskernel|isoreg|KalmanForecast|KalmanLike|KalmanRun|KalmanSmooth|kernapply|kernapply\.default|kernapply\.ts|kernapply\.tskernel|kernapply\.vector|kernel|kmeans|knots|knots\.stepfun|kruskal\.test|kruskal\.test.default|kruskal\.test.formula|ks\.test|ksmooth|labels\.dendrogram|labels\.dist|labels\.lm|labels\.terms|lag|lag\.default|lag\.plot|line|lines\.isoreg|lines\.stepfun|lines\.ts|lm|lm\.fit|lm\.influence|lm\.wfit|loadings|loess|loess\.control|loess\.smooth|logLik|logLik\.Arima|logLik\.glm|logLik\.lm|logLik\.logLik|logLik\.nls|loglin|lowess|ls\.diag|ls\.print|lsfit|mad|mahalanobis|make\.link|make\.tables.aovproj|make\.tables.aovprojlist|makeARIMA|makepredictcall|makepredictcall\.default|makepredictcall\.poly|manova|mantelhaen\.test|mauchly\.test|mauchly\.test.mlm|mauchly\.test.SSD|mcnemar\.test|median|median\.default|medpolish|merge\.dendrogram|midcache\.dendrogram|model\.extract|model\.frame|model\.frame.aovlist|model\.frame.default|model\.frame.glm|model\.frame.lm|model\.matrix|model\.matrix.default|model\.matrix.lm|model\.offset|model\.response|model\.tables|model\.tables.aov|model\.tables.aovlist|model\.weights|monthplot|monthplot\.default|monthplot\.stl|monthplot\.StructTS|monthplot\.ts|mood\.test|mood\.test.default|mood\.test.formula|mvfft|n\.knots|na\.action|na\.action.default|na\.contiguous|na\.contiguous.default|na\.exclude|na\.exclude.data.frame|na\.exclude.default|na\.fail|na\.fail.default|na\.omit|na\.omit.data.frame|na\.omit.default|na\.omit.ts|na\.pass|napredict|napredict\.default|napredict\.exclude|naprint|naprint\.default|naprint\.exclude|naprint\.omit|naresid|naresid\.default|naresid\.exclude|nextn|nleaves|nlm|nlminb|nls|nls_port_fit|nls\.control|nlsModel|nlsModel\.plinear|NLSstAsymptotic|NLSstAsymptotic\.sortedXyData|NLSstClosestX|NLSstClosestX\.sortedXyData|NLSstLfAsymptote|NLSstLfAsymptote\.sortedXyData|NLSstRtAsymptote|NLSstRtAsymptote\.sortedXyData|nobs|nobs\.default|nobs\.dendrogram|nobs\.glm|nobs\.lm|nobs\.logLik|nobs\.nls|numericDeriv|offset|oneway\.test|Ops\.ts|optim|optimHess|optimise|optimize|order\.dendrogram|p\.adjust|pacf|pacf\.default|pairwise\.prop.test|pairwise\.t.test|pairwise\.table|pairwise\.wilcox.test|pbeta|pbinom|pbirthday|pcauchy|pchisq|pexp|pf|pgamma|pgeom|phyper|Pillai|plclust|plnorm|plogis|plot\.acf|plot\.decomposed.ts|plot\.dendrogram|plot\.density|plot\.ecdf|plot\.hclust|plot\.HoltWinters|plot\.isoreg|plot\.lm|plot\.medpolish|plot\.mlm|plot\.ppr|plot\.prcomp|plot\.princomp|plot\.profile.nls|plot\.spec|plot\.spec.coherency|plot\.spec.phase|plot\.stepfun|plot\.stl|plot\.ts|plot\.tskernel|plot\.TukeyHSD|plotNode|plotNodeLimit|pnbinom|pnorm|pointwise|poisson|poisson\.test|poly|polym|port_get_named_v|port_msg|power|power\.anova.test|power\.prop.test|power\.t.test|PP\.test|ppoints|ppois|ppr|ppr\.default|ppr\.formula|prcomp|prcomp\.default|prcomp\.formula|predict|predict\.ar|predict\.Arima|predict\.arima0|predict\.glm|predict\.HoltWinters|predict\.lm|predict\.loess|predict\.mlm|predict\.nls|predict\.poly|predict\.ppr|predict\.prcomp|predict\.princomp|predict\.smooth.spline|predict\.smooth.spline.fit|predict\.StructTS|predLoess|preplot|princomp|princomp\.default|princomp\.formula|print\.acf|print\.anova|print\.aov|print\.aovlist|print\.ar|print\.Arima|print\.arima0|print\.dendrogram|print\.density|print\.dist|print\.dummy_coef|print\.dummy_coef_list|print\.ecdf|print\.factanal|print\.family|print\.formula|print\.ftable|print\.glm|print\.hclust|print\.HoltWinters|print\.htest|print\.infl|print\.integrate|print\.isoreg|print\.kmeans|print\.lm|print\.loadings|print\.loess|print\.logLik|print\.medpolish|print\.mtable|print\.nls|print\.pairwise.htest|print\.power.htest|print\.ppr|print\.prcomp|print\.princomp|print\.smooth.spline|print\.stepfun|print\.stl|print\.StructTS|print\.summary.aov|print\.summary.aovlist|print\.summary.ecdf|print\.summary.glm|print\.summary.lm|print\.summary.loess|print\.summary.manova|print\.summary.nls|print\.summary.ppr|print\.summary.prcomp|print\.summary.princomp|print\.tables_aov|print\.terms|print\.ts|print\.tskernel|print\.TukeyHSD|print\.tukeyline|print\.tukeysmooth|print\.xtabs|printCoefmat|profile|profile\.nls|profiler|profiler\.nls|proj|proj\.aov|proj\.aovlist|proj\.default|proj\.lm|proj\.matrix|promax|prop\.test|prop\.trend.test|psignrank|pt|ptukey|punif|pweibull|pwilcox|qbeta|qbinom|qbirthday|qcauchy|qchisq|qexp|qf|qgamma|qgeom|qhyper|qlnorm|qlogis|qnbinom|qnorm|qpois|qqline|qqnorm|qqnorm\.default|qqplot|qr\.lm|qsignrank|qt|qtukey|quade\.test|quade\.test.default|quade\.test.formula|quantile|quantile\.default|quantile\.ecdf|quantile\.POSIXt|quasi|quasibinomial|quasipoisson|qunif|qweibull|qwilcox|r2dtable|Rank|rbeta|rbinom|rcauchy|rchisq|read\.ftable|rect\.hclust|reformulate|regularize\.values|relevel|relevel\.default|relevel\.factor|relevel\.ordered|reorder|reorder\.default|reorder\.dendrogram|replications|reshape|resid|residuals|residuals\.default|residuals\.glm|residuals\.HoltWinters|residuals\.isoreg|residuals\.lm|residuals\.nls|residuals\.smooth.spline|residuals\.tukeyline|rev\.dendrogram|rexp|rf|rgamma|rgeom|rhyper|rlnorm|rlogis|rmultinom|rnbinom|rnorm|Roy|rpois|rsignrank|rstandard|rstandard\.glm|rstandard\.lm|rstudent|rstudent\.glm|rstudent\.lm|rt|runif|runmed|rweibull|rwilcox|rWishart|safe_pchisq|safe_pf|scatter\.smooth|screeplot|screeplot\.default|sd|se\.aov|se\.aovlist|se\.contrast|se\.contrast.aov|se\.contrast.aovlist|selfStart|selfStart\.default|selfStart\.formula|setNames|shapiro\.test|sigma|sigma\.default|sigma\.mlm|simpleLoess|simulate|simulate\.lm|smooth|smooth\.spline|smoothEnds|sortedXyData|sortedXyData\.default|spec\.ar|spec\.pgram|spec\.taper|spectrum|sphericity|spl_coef_conv|spline|splinefun|splinefunH|splinefunH0|SSasymp|SSasympOff|SSasympOrig|SSbiexp|SSD|SSD\.mlm|SSfol|SSfpl|SSgompertz|SSlogis|SSmicmen|SSweibull|start|start\.default|stat\.anova|step|stepfun|stl|str\.dendrogram|str\.logLik|StructTS|summary\.aov|summary\.aovlist|summary\.ecdf|summary\.glm|summary\.infl|summary\.lm|summary\.loess|summary\.manova|summary\.mlm|summary\.nls|summary\.ppr|summary\.prcomp|summary\.princomp|summary\.stepfun|summary\.stl|summary\.tukeysmooth|supsmu|symnum|t\.test|t\.test.default|t\.test.formula|t\.ts|termplot|terms|terms\.aovlist|terms\.default|terms\.formula|terms\.terms|Thin\.col|Thin\.row|time|time\.default|time\.ts|toeplitz|Tr|ts|ts\.intersect|ts\.plot|ts\.union|tsdiag|tsdiag\.Arima|tsdiag\.arima0|tsdiag\.StructTS|tsp|tsSmooth|tsSmooth\.StructTS|TukeyHSD|TukeyHSD\.aov|uniroot|update|update\.default|update\.formula|var|var\.test|var\.test.default|var\.test.formula|variable\.names|variable\.names.default|variable\.names.lm|varimax|vcov|vcov\.Arima|vcov\.glm|vcov\.lm|vcov\.mlm|vcov\.nls|vcov\.summary.glm|vcov\.summary.lm|weighted\.mean|weighted\.mean.Date|weighted\.mean.default|weighted\.mean.difftime|weighted\.mean.POSIXct|weighted\.mean.POSIXlt|weighted\.residuals|weights|weights\.default|weights\.glm|weights\.nls|wilcox\.test|wilcox\.test.default|wilcox\.test.formula|Wilks|window|window\.default|window\.ts|write\.ftable|xtabs)\s*(\()
      captures:
        1: support.function.r
      push: r-function-parameters
    # utils
    - match: \b(adist|alarm|apropos|aregexec|argNames|argsAnywhere|as\.bibentry|as\.bibentry.bibentry|as\.bibentry.citation|as\.character.person|as\.character.roman|as\.person|as\.person.default|as\.personList|as\.personList.default|as\.personList.person|as\.relistable|as\.roman|aspell|aspell_find_dictionaries|aspell_find_program|aspell_inspect_context|aspell_package|aspell_package_C_files|aspell_package_description|aspell_package_pot_files|aspell_package_R_files|aspell_package_Rd_files|aspell_package_vignettes|aspell_R_C_files|aspell_R_manuals|aspell_R_R_files|aspell_R_Rd_files|aspell_R_vignettes|aspell_write_personal_dictionary_file|assignInMyNamespace|assignInNamespace|attachedPackageCompletions|available\.packages|bibentry|blank_out_ignores_in_lines|blank_out_regexp_matches|browseEnv|browseURL|browseVignettes|bug\.report|bug\.report.info|c\.bibentry|c\.person|capture\.output|changedFiles|check_for_XQuartz|checkCRAN|chooseBioCmirror|chooseCRANmirror|citation|cite|citeNatbib|citEntry|citFooter|citHeader|close\.socket|close\.txtProgressBar|combn|compareVersion|contrib\.url|correctFilenameToken|count\.fields|CRAN\.packages|create\.post|data|data\.entry|dataentry|de|de\.ncols|de\.restore|de\.setup|debugcall|debugger|defaultUserAgent|demo|download\.file|download\.packages|dump\.frames|edit|edit\.data.frame|edit\.default|edit\.matrix|edit\.vignette|emacs|example|expr2token|file_test|file\.edit|fileCompletionPreferred|fileCompletions|fileSnapshot|filter_packages_by_depends_predicates|find|find_files_in_directories|findExactMatches|findFuzzyMatches|findGeneric|findLineNum|findMatches|fix|fixInNamespace|flush\.console|fnLineNum|format\.aspell|format\.bibentry|format\.citation|format\.news_db|format\.object_size|format\.person|format\.roman|formatOL|formatUL|functionArgs|fuzzyApropos|get_parse_data_for_message_strings|getAnywhere|getCRANmirrors|getDependencies|getFromNamespace|getIsFirstArg|getKnownS3generics|getParseData|getParseText|getRcode|getRcode\.vignette|getS3method|getSrcDirectory|getSrcfile|getSrcFilename|getSrcLocation|getSrcref|getTxtProgressBar|glob2rx|globalVariables|hasName|head|head\.data.frame|head\.default|head\.ftable|head\.function|head\.matrix|head\.table|help|help\.request|help\.search|help\.start|helpCompletions|history|hsearch_db|hsearch_db_concepts|hsearch_db_keywords|index\.search|inFunction|install\.packages|installed\.packages|is\.relistable|isBasePkg|isInsideQuotes|isS3method|isS3stdGeneric|keywordCompletions|limitedLabels|loadedPackageCompletions|loadhistory|localeToCharset|ls\.str|lsf\.str|maintainer|make_sysdata_rda|make\.packages.html|make\.socket|makeRegexpSafe|makeRweaveLatexCodeRunner|makeUserAgent|matchAvailableTopics|memory\.limit|memory\.size|menu|merge_demo_index|merge_vignette_index|methods|mirror2html|modifyList|new\.packages|news|normalCompletions|nsl|object\.size|offline_help_helper|old\.packages|Ops\.roman|package\.skeleton|packageDescription|packageName|packageStatus|packageVersion|page|person|personList|pico|print\.aspell|print\.aspell_inspect_context|print\.bibentry|print\.Bibtex|print\.browseVignettes|print\.changedFiles|print\.citation|print\.fileSnapshot|print\.findLineNumResult|print\.getAnywhere|print\.help_files_with_topic|print\.hsearch|print\.hsearch_db|print\.Latex|print\.ls_str|print\.MethodsFunction|print\.news_db|print\.object_size|print\.packageDescription|print\.packageIQR|print\.packageStatus|print\.person|print\.roman|print\.sessionInfo|print\.socket|print\.summary.packageStatus|print\.vignette|printhsearchInternal|process\.events|prompt|prompt\.data.frame|prompt\.default|promptData|promptImport|promptPackage|rc\.getOption|rc\.options|rc\.settings|rc\.status|read\.csv|read\.csv2|read\.delim|read\.delim2|read\.DIF|read\.fortran|read\.fwf|read\.socket|read\.table|readCitationFile|recover|registerNames|regquote|relist|relist\.default|relist\.factor|relist\.list|relist\.matrix|remove\.packages|removeSource|rep\.bibentry|rep\.roman|resolvePkgType|Rprof|Rprof_memory_summary|Rprofmem|RShowDoc|RSiteSearch|rtags|rtags\.file|Rtangle|RtangleFinish|RtangleRuncode|RtangleSetup|RtangleWritedoc|RweaveChunkPrefix|RweaveEvalWithOpt|RweaveLatex|RweaveLatexFinish|RweaveLatexOptions|RweaveLatexRuncode|RweaveLatexSetup|RweaveLatexWritedoc|RweaveTryStop|savehistory|select\.list|sessionInfo|setBreakpoint|setIsFirstArg|setRepositories|setTxtProgressBar|shorten\.to.string|simplifyRepos|sort\.bibentry|specialCompletions|specialFunctionArgs|specialOpCompletionsHelper|specialOpLocs|stack|stack\.data.frame|stack\.default|Stangle|str|str\.data.frame|str\.Date|str\.default|str\.POSIXt|strcapture|strextract|strOptions|substr_with_tabs|summary\.aspell|summary\.packageStatus|summaryRprof|suppressForeignCheck|Sweave|SweaveGetSyntax|SweaveHooks|SweaveParseOptions|SweaveReadFile|SweaveSyntConv|tail|tail\.data.frame|tail\.default|tail\.ftable|tail\.function|tail\.matrix|tail\.table|tar|timestamp|toBibtex|toBibtex\.bibentry|toBibtex\.person|toLatex|toLatex\.sessionInfo|topicName|txtProgressBar|type\.convert|undebugcall|unique\.bibentry|unlist\.relistable|unstack|unstack\.data.frame|unstack\.default|untar|untar2|unzip|update\.packages|update\.packageStatus|upgrade|upgrade\.packageStatus|url\.show|URLdecode|URLencode|vi|View|vignette|write\.csv|write\.csv2|write\.etags|write\.socket|write\.table|wsbrowser|xedit|xemacs|zip)\s*(\()
      captures:
        1: support.function.r
      push: r-function-parameters

  python:
    - include: statements

  statements:
    - include: docstrings
    - include: line-statements
    - include: block-statements
    - include: classes
    - include: r-functions
    - include: functions
    - include: modifiers
    - include: assignments
    - match: ;
      scope: punctuation.terminator.statement.python
    - include: line-expressions

  line-statements:
    - include: imports
    - include: decorators
    - match: \b(raise)\b
      scope: keyword.control.flow.raise.python
      push:
        - meta_scope: meta.statement.raise.python
        - include: line-continuation-or-pop
        - match: \b(from)\b
          scope: keyword.control.flow.raise.from.python
          set:
            - meta_scope: meta.statement.raise.python
            - include: line-continuation-or-pop
            - include: expressions
        - include: expressions
    - match: \b(assert)\b
      scope: keyword.other.assert.python
    - match: \b(del)\b
      scope: keyword.other.del.python
    - match: \b(print)\b(?! *([,.()\]}]))
      scope: keyword.other.print.python
    - match: \b(exec)\b(?! *($|[,.()\]}]))
      scope: keyword.other.exec.python
    - match: \b(return)\b
      scope: keyword.control.flow.return.python
    - match: \b(break)\b
      scope: keyword.control.flow.break.python
    - match: \b(continue)\b
      scope: keyword.control.flow.continue.python
    - match: \b(pass)\b
      scope: keyword.control.flow.pass.python
    - match: ':'
      scope: punctuation.separator.annotation.variable.python

  imports:
    - match: \b(import)\b
      scope: keyword.control.import.python
      push:
        - meta_scope: meta.statement.import.python
        - include: line-continuation-or-pop
        - match: ','
          scope: punctuation.separator.import-list.python
        - match: \.
          scope: invalid.illegal.unexpected-relative-import.python
        - include: import-alias
        - include: qualified-name
        - match: (?=\S)
          pop: true
    - match: \b(from)\b
      scope: keyword.control.import.from.python
      push:
        - meta_scope: meta.statement.import.python
        - meta_content_scope: meta.import-source.python
        - include: line-continuation-or-pop
        - match: \b(import)\b
          scope: keyword.control.import.python
          set:
            - meta_scope: meta.statement.import.python
            - include: line-continuation-or-pop
            - match: ' *(\()'
              captures:
                1: punctuation.section.import-list.begin.python
              set:
                - meta_scope: meta.statement.import.python
                - include: comments
                - match: \)
                  scope: punctuation.section.import-list.end.python
                  pop: true
                - include: import-name-list
                - match: (?=\S)
                  pop: true
            - match: ''
              set:
                - meta_scope: meta.statement.import.python
                - include: line-continuation-or-pop
                - include: import-name-list
                - match: (?=\S)
                  pop: true
            - match: (?=\S)
              pop: true
        - include: import-from-name
        - match: (?=\S)
          pop: true

  import-name-list:
    - match: ','
      scope: punctuation.separator.import-list.python
    - include: import-alias
    - include: name
    - match: \*
      scope: constant.language.import-all.python
    - match: \S+
      scope: invalid.illegal.name.import.python

  import-alias:
    - match: \b(as)\b
      scope: keyword.control.import.as.python

  import-from-name:
    - match: \.+
      scope: meta.import-path.python keyword.control.import.relative.python
    - match: (?={{path}})
      push:
        - meta_scope: meta.import-path.python
        - match: '{{illegal_names}}\b'
          scope: invalid.illegal.name.python
        - match: '{{identifier}}'
          scope: meta.import-name.python
        - match: \s*(\.) *(?:({{illegal_names}}\b)|({{identifier}}))
          captures:
            1: punctuation.accessor.dot.python
            2: invalid.illegal.name.python
            3: meta.import-name.python
        - match: \ *(\. *\S+) # matches and consumes the remainder of "abc.123" or "abc.+"
          captures:
            1: invalid.illegal.name.python
          pop: true
        - match: ''
          pop: true

  block-statements:
    # async for ... in ...:
    - match: \b(async +)?(for)\b
      captures:
        1: storage.modifier.async.python
        2: keyword.control.flow.for.python
      push:
        - meta_scope: meta.statement.for.python
        - include: line-continuation-or-pop
        - match: \b(in)\b
          scope: keyword.control.flow.for.in.python
          set:
            - meta_scope: meta.statement.for.python
            - include: line-continuation-or-pop
            - match: ':'
              scope: punctuation.section.block.for.python
              pop: true
            - include: expressions
        - match: ':'
          scope: invalid.illegal.missing-in.python
          pop: true
        - include: target-list
    # async with ... as ...:
    - match: \b(async +)?(with)\b
      captures:
        1: storage.modifier.async.python
        2: keyword.control.flow.with.python
      push: with-body
    # except ... as ...:
    - match: \b(except)\b
      scope: keyword.control.flow.except.python
      push:
        - meta_scope: meta.statement.except.python
        - include: line-continuation-or-pop
        - match: ':'
          scope: punctuation.section.block.except.python
          pop: true
        - match: '\b(as)\b'
          scope: keyword.control.flow.as.python
          set:
            - meta_content_scope: meta.statement.except.python
            - include: line-continuation-or-pop
            - match: ':'
              scope: meta.statement.except.python punctuation.section.block.except.python
              pop: true
            - include: name
        - include: target-list
    - match: \bif\b
      scope: keyword.control.flow.conditional.python
      push:
        - meta_scope: meta.statement.if.python
        - include: line-continuation-or-pop
        - match: ':'
          scope: punctuation.section.block.conditional.python
          pop: true
        - include: expressions
    - match: \bwhile\b
      scope: keyword.control.flow.while.python
      push:
        - meta_scope: meta.statement.while.python
        - include: line-continuation-or-pop
        - match: ':'
          scope: punctuation.section.block.while.python
          pop: true
        - include: expressions
    - match: \b(elif|else)\b(?:\s*(:))?
      scope: meta.statement.conditional.python
      captures:
        1: keyword.control.flow.conditional.python
        2: punctuation.section.block.python
    - match: \b(try)\b(?:\s*(:))?
      scope: meta.statement.try.python
      captures:
        1: keyword.control.flow.try.python
        2: punctuation.section.block.try.python
    - match: \b(finally)\b(?:\s*(:))?
      scope: meta.statement.finally.python
      captures:
        1: keyword.control.flow.finally.python
        2: punctuation.section.block.finally.python

  with-body:
    - meta_scope: meta.statement.with.python
    - include: line-continuation-or-pop
    - match: \b(as)\b
      scope: keyword.control.flow.with.as.python
      set: with-as
    - match: ':'
      scope: punctuation.section.block.with.python
      pop: true
    - match: ','
      scope: punctuation.separator.with-resources.python
    - include: expressions

  with-as:
    - meta_scope: meta.statement.with.python
    - include: line-continuation-or-pop
    - match: ':'
      scope: punctuation.section.block.with.python
      pop: true
    - match: ','
      scope: punctuation.separator.with-resources.python
      set: with-body
    - include: name
    - include: groups
    - include: lists

  expressions-common:
    - include: comments
    - include: py-constants
    - include: numbers
    - include: yields
    - include: py-operators
    - include: lambda
    - match: \b(await)\b
      scope: keyword.other.await.python
    - include: inline-if
    - include: py-strings
    - include: py-function-calls
    - include: item-access
    - include: groups
    - match: \)
      scope: invalid.illegal.stray.brace.round.python
    - match: \]
      scope: invalid.illegal.stray.brace.square.python
    - match: \}
      scope: invalid.illegal.stray.brace.curly.python
    - include: lists
    - include: dictionaries-and-sets
    - include: line-continuation

  line-expressions: # Always include this last!
    - include: expressions-common
    - include: qualified-name

  expressions: # Always include this last!
    # Differs from the line scope in that invalid-name matches will pop the current context
    # and matches accessors continued on a different line
    - include: expressions-common
    - include: illegal-names-pop
    - include: qualified-name
    - match: '(\.) *(?={{identifier}})'
      captures:
        1: punctuation.accessor.dot.python
      push:
        - include: magic-function-names
        - include: magic-variable-names
        - include: illegal-names
        - include: generic-names
        - match: ''
          pop: true

  after-expression:
    # direct function call
    - match: '\s*(\()'
      captures:
        1: punctuation.section.arguments.begin.python
      push:
        - meta_scope: meta.function-call.arguments.python
        - match: \)
          scope: punctuation.section.arguments.end.python
          pop: true
        - include: arguments
    # item access
    - match: '\s*(\[)'
      captures:
        1: meta.item-access.python punctuation.section.brackets.begin.python
      push:
        - meta_content_scope: meta.item-access.arguments.python
        - match: \]
          scope: meta.item-access.python punctuation.section.brackets.end.python
          pop: true
        - match: ':'
          scope: punctuation.separator.slice.python
        - include: expressions
    # indirect function call following attribute access
    - include: py-function-calls
    # arbitrary attribute access
    - match: '\s*(\.)'
      captures:
        1: punctuation.accessor.dot.python
      push:
        - include: magic-function-names
        - include: magic-variable-names
        - include: illegal-names
        - include: generic-names
        - match: ''
          pop: true
    - match: ''
      pop: true

  comments:
    - match: "[#%]"
      scope: punctuation.definition.comment.python
      push:
        - meta_scope: comment.line
        - match: \n
          pop: true

  py-constants:
    - match: \b(None|True|False|Ellipsis|NotImplemented|__debug__)\b
      scope: constant.language.python
    - match: \.{3}(?!\w)
      scope: constant.language.python

  numbers:
    # https://docs.python.org/3/reference/lexical_analysis.html#numeric-literals
    # hexadecimal
    - match: \b(?i)(0x)\h*(L) # py2
      scope: constant.numeric.integer.long.hexadecimal.python
      captures:
        1: punctuation.definition.numeric.hexadecimal.python
        2: storage.type.numeric.long.python
    - match: \b(?i)(0x)(_?\h)+
      scope: constant.numeric.integer.hexadecimal.python
      captures:
        1: punctuation.definition.numeric.hexadecimal.python
    # octal
    - match: \b(?i)(0o?)(?=o|[0-7])[0-7]*(L) # py2
      scope: constant.numeric.integer.long.octal.python
      captures:
        1: punctuation.definition.integer.octal.python
        2: storage.type.numeric.long.python
    - match: \b(?i)(0)[0-7]+ # py2
      scope: constant.numeric.integer.octal.python
      captures:
        1: punctuation.definition.numeric.octal.python
    - match: \b(?i)(0o)(_?[0-7])+
      scope: constant.numeric.integer.octal.python
      captures:
        1: punctuation.definition.numeric.octal.python
    # binary
    - match: \b(?i)(0b)[01]*(L) # py2
      scope: constant.numeric.integer.long.binary.python
      captures:
        1: punctuation.definition.numeric.binary.python
        2: storage.type.numeric.long.python
    - match: \b(?i)(0b)(_?[01])*
      scope: constant.numeric.integer.binary.python
      captures:
        1: punctuation.definition.numeric.binary.python
    # complex
    - match: (?i){{digitpart}}?(\.){{digitpart}}(?:e[\-\+]?{{digitpart}})?(j) # mandatory fraction
      scope: constant.numeric.complex.python
      captures:
        1: punctuation.separator.decimal.python
        2: storage.type.numeric.complex.python
    - match: \b(?i)(?:{{digitpart}}(?:(\.){{digitpart}}?)?|(\.){{digitpart}})(?:e[\-\+]?{{digitpart}})(j) # mandatory exponent
      scope: constant.numeric.complex.python
      captures:
        1: punctuation.separator.decimal.python
        2: punctuation.separator.decimal.python
        3: storage.type.numeric.complex.python
    - match: (?i){{digitpart}}(\.)?(j) # mandatory digitpart
      scope: constant.numeric.complex.python
      captures:
        1: punctuation.separator.decimal.python
        2: storage.type.numeric.complex.python
    # floating point
    - match: (?i){{digitpart}}?(\.){{digitpart}}(?:e[\-\+]?{{digitpart}})? # mandatory fraction
      scope: constant.numeric.float.python
      captures:
        1: punctuation.separator.decimal.python
    - match: \b(?i)(?:{{digitpart}}(?:(\.){{digitpart}}?)?|(\.){{digitpart}})(?:e[\-\+]?{{digitpart}}) # mandatory exponent
      scope: constant.numeric.float.python
      captures:
        1: punctuation.separator.decimal.python
        2: punctuation.separator.decimal.python
    - match: (?i){{digitpart}}(\.) # mandatory digitpart
      scope: constant.numeric.float.python
      captures:
        1: punctuation.separator.decimal.python
    # integer
    - match: \b(?i)(?:[1-9]\d*|0)(L)\b # py2
      scope: constant.numeric.integer.long.decimal.python
      captures:
        1: storage.type.numeric.long.python
    - match: \b(?i)([1-9][\d_]*|0)\b
      scope: constant.numeric.integer.decimal.python

  modifiers:
    - match: \b(?:(global)|(nonlocal))\b
      captures:
        1: storage.modifier.global.python
        2: storage.modifier.nonlocal.python
      push:
        - include: line-continuation-or-pop
        - match: ','
          scope: punctuation.separator.storage-list.python
        - include: name
        - match: \S+
          scope: invalid.illegal.name.storage.python

  yields:
    - match: \b(yield)(?:\s+(from))?\b
      captures:
        1: keyword.control.flow.yield.python
        2: keyword.control.flow.yield-from.python

  assignments:
    - match: \+=|-=|\*=|/=|//=|%=|@=|&=|\|=|\^=|>>=|<<=|\*\*=
      scope: keyword.operator.assignment.augmented.python
    - match: '=(?!=)'
      scope: keyword.operator.assignment.python

  py-operators:
    - match: <>
      scope: invalid.deprecated.operator.python
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.python
    - match: \+|\-|\*|\*\*|/|//|%|<<|>>|&|\||\^|~
      scope: keyword.operator.arithmetic.python
    - match: \b(and|in|is|not|or)\b
      comment: keyword operators that evaluate to True or False
      scope: keyword.operator.logical.python
    - match: '@'
      scope: keyword.operator.matrix.python

  allow-unpack-operators:
    # Match unpacking operators, if present
    - include: comments
    - match: \*{3,}
      scope: invalid.illegal.syntax.python
      pop: true
    - match: \*\*
      scope: keyword.operator.unpacking.mapping.python
      pop: true
    - match: \*
      scope: keyword.operator.unpacking.sequence.python
      pop: true
    - match: (?=\S)
      pop: true

  classes:
    - match: '^\s*(class)\b'
      captures:
        1: storage.type.class.python
      push:
        - meta_scope: meta.class.python
        - include: line-continuation-or-pop
        - match: ':'
          scope: punctuation.section.class.begin.python
          pop: true
        - match: "(?={{identifier}})"
          push:
            - meta_content_scope: entity.name.class.python
            - include: entity-name-class
            - match: ''
              pop: true
        - match: \(
          scope: punctuation.section.inheritance.begin.python
          set:
            - meta_scope: meta.class.inheritance.python
            - match: \)
              scope: punctuation.section.inheritance.end.python
              set:
                - include: line-continuation-or-pop
                - match: ':'
                  scope: meta.class.python punctuation.section.class.begin.python
                  pop: true
                - match: (?=\S)
                  pop: true
            - match: ':'
              scope: invalid.illegal.no-closing-parens.python
              pop: true
            - match: ','
              scope: punctuation.separator.inheritance.python
            - include: illegal-names-pop
            - match: ({{identifier}}) *(=)
              captures:
                1: variable.parameter.class-inheritance.python
                2: keyword.operator.assignment.python
            - match: (?={{path}})
              push:
                - meta_scope: entity.other.inherited-class.python
                - match: '{{identifier}}(?: *(\.) *)?'
                  captures:
                    1: punctuation.accessor.dot.python
                - match: ''
                  pop: true
            - include: expressions

  functions:
    - match: '^\s*(?:(async)\s+)?(def)\b'
      captures:
        1: storage.modifier.async.python
        2: storage.type.function.python
      push:
        - meta_scope: meta.function.python
        - include: line-continuation-or-pop
        - match: ':'
          scope: punctuation.section.function.begin.python
          pop: true
        - match: "(?={{identifier}})"
          push:
            - meta_content_scope: entity.name.function.python
            - include: entity-name-function
            - match: ''
              pop: true
        - match: '(?=\()'
          set:
            - match: \(
              scope: meta.function.parameters.python punctuation.section.parameters.begin.python
              set: [py-function-parameters, allow-unpack-operators]

  py-function-parameters:
    - meta_content_scope: meta.function.parameters.python
    - match: \)
      scope: punctuation.section.parameters.end.python
      set: function-after-parameters
    - include: comments
    - match: ','
      scope: punctuation.separator.parameters.python
      push: allow-unpack-operators
    - match: '(?==)'
      set:
        - match: '='
          scope: keyword.operator.assignment.python
          set:
            - meta_scope: meta.function.parameters.default-value.python
            - match: '(?=[,)])'
              set: [py-function-parameters, allow-unpack-operators]
            - include: expressions
    - match: '(?=:)'
      set:
        - match: ':'
          scope: punctuation.separator.annotation.parameter.python
          set:
            - meta_scope: meta.function.parameters.annotation.python
            - match: '(?=[,)=])'
              set: py-function-parameters
            - include: expressions
    - include: function-parameters-tuple
    - include: illegal-names
    - match: '{{identifier}}'
      scope: variable.parameter.python
    - include: line-continuation

  function-parameters-tuple:
    # python 2 style tuple arguments
    # removed from python 3 since PEP-3113
    - match: \(
      scope: punctuation.section.group.begin.python
      push:
        - meta_scope: meta.group.python
        - match: \)
          scope: punctuation.section.group.end.python
          set: after-expression
        - include: comments
        - match: ','
          scope: punctuation.separator.parameters.python
          push: allow-unpack-operators
        # default values should follow the argument
        - match: '(?==)'
          push:
            - meta_scope: invalid.illegal.default-value.python
            - match: '(?=[,)=])'
              pop: true
        # python 2 does not support type annotations
        - match: '(?=:)'
          push:
            - meta_scope: invalid.illegal.annotation.python
            - match: '(?=[,)=])'
              pop: true
        - include: illegal-names
        - match: '{{identifier}}'
          scope: variable.parameter.python
        - include: line-continuation

  function-after-parameters:
    - meta_content_scope: meta.function.python
    - match: '(?=->)'
      set:
        - meta_content_scope: meta.function.annotation.return.python
        - match: ->
          scope: punctuation.separator.annotation.return.python
        - match: '(?=:)'
          set: function-after-parameters
        - include: line-continuation-or-pop
        - include: expressions
    - match: ':'
      scope: meta.function.python punctuation.section.function.begin.python
      pop: true
    - include: comments
    - match: (?=\S)
      pop: true

  decorators:
    - match: ^\s*(?=@)
      push:
        # Due to line continuations, we don't know whether this is a "function call" yet
        - meta_content_scope: meta.annotation.python
        - match: '@'
          scope: punctuation.definition.annotation.python
        - match: multilang
          scope: support.function.builtin.python
        - match: $
          pop: true
        - include: line-continuation-or-pop
        - match: (?=\.?\s*{{path}}\s*\() # now we do
          set: [decorator-function-call-wrapper, qualified-name-until-leaf]
        - match: (?=\.?\s*{{path}})
          push: [decorator-wrapper, qualified-name-until-leaf]
        - match: \S
          scope: invalid.illegal.character.python
          pop: true

  decorator-wrapper:
    - match: (\.)\s*
      captures:
        1: punctuation.accessor.dot.python
      set:
        - meta_scope: meta.qualified-name.python
        - meta_content_scope: variable.annotation.python
        - include: dotted-name-specials
        - include: generic-names
        - match: ''
          pop: true
    - match: ''
      set:
        - meta_scope: meta.qualified-name.python variable.annotation.python
        - include: name-specials
        - include: generic-names
        - match: ''
          pop: true

  decorator-function-call-wrapper:
    - meta_scope: meta.annotation.function.python
    - match: \)
      scope: punctuation.section.arguments.end.python
      set: after-expression
    - match: \(
      scope: meta.annotation.function.python punctuation.section.arguments.begin.python
      push:
        - clear_scopes: 1
        - meta_content_scope: meta.annotation.arguments.python
        - match: (?=\))
          pop: true
        - include: arguments
    - match: (\.)\s*
      captures:
        1: punctuation.accessor.dot.python
      push:
        - meta_scope: meta.qualified-name.python
        - meta_content_scope: variable.annotation.function.python
        - include: dotted-name-specials
        - include: generic-names
        - match: ''
          pop: true
    - match: ''
      push:
        - meta_scope: meta.qualified-name.python variable.annotation.function.python
        - include: name-specials
        - include: generic-names
        - match: ''
          pop: true

  item-access:
    - match: '(?={{path}}\s*\[)'
      push:
        - match: \]
          scope: meta.item-access.python punctuation.section.brackets.end.python
          set: after-expression
        - match: '(?={{path}}\s*\[)'
          push:
            - meta_content_scope: meta.item-access.python
            - match: '(?=\s*\[)'
              pop: true
            - include: qualified-name
        - match: \[
          scope: meta.item-access.python punctuation.section.brackets.begin.python
          push:
            - meta_content_scope: meta.item-access.arguments.python
            - match: '(?=\])'
              pop: true
            - match: ':'
              scope: punctuation.separator.slice.python
            - include: expressions

  py-function-calls:
    - match: '(?=(\.\s*)?{{path}}\s*\()'
      push: [function-call-wrapper, qualified-name-until-leaf]

  function-call-wrapper:
    - meta_scope: meta.function-call.python
    - match: (?=\()  # need to remove meta.function-call.python from opening parens
      set:
        - match: \(
          scope: punctuation.section.arguments.begin.python
          set:
            - meta_scope: meta.function-call.arguments.python
            - match: \)
              scope: punctuation.section.arguments.end.python
              set: after-expression
            - include: arguments
    - match: (\.)\s*(?={{identifier}})
      captures:
        1: punctuation.accessor.dot.python
      push:
        - meta_scope: meta.qualified-name.python
        - meta_content_scope: variable.function.python
        - include: dotted-name-specials
        - include: generic-names
        - match: ''
          pop: true
    - match: (?={{identifier}})
      push:
        - meta_scope: meta.qualified-name.python variable.function.python
        - include: name-specials
        - include: generic-names
        - match: ''
          pop: true

  arguments:
    - include: keyword-arguments
    - match: ','
      scope: punctuation.separator.arguments.python
      push: allow-unpack-operators
    - include: inline-for
    - include: expressions

  keyword-arguments:
    - match: '(?={{identifier}}\s*=(?!=))'
      push:
        - include: line-continuation-or-pop
        - match: '='
          scope: keyword.operator.assignment.python
          set:
            - match: (?=\s*[,):])
              pop: true
            - include: expressions
        - include: illegal-names
        - match: '{{identifier}}'
          scope: variable.parameter.python

  lambda:
    - match: \b(lambda)(?=\s|:|$)
      scope: storage.type.function.inline.python
      push: [lambda-parameters, allow-unpack-operators]

  lambda-parameters:
    - meta_scope: meta.function.inline.python
    - meta_content_scope: meta.function.inline.parameters.python
    - include: line-continuation-or-pop
    - match: '\:'
      scope: punctuation.section.function.begin.python
      pop: true
    - match: ','
      scope: punctuation.separator.parameters.python
      push: allow-unpack-operators
    - include: keyword-arguments
    - include: function-parameters-tuple
    - include: illegal-names
    - match: '{{identifier}}'
      scope: variable.parameter.python
    - match: '\S'
      scope: invalid.illegal.expected-parameter.python

  groups:
    - match: \(
      scope: punctuation.section.group.begin.python
      push:
        - meta_scope: meta.group.python
        - match: \)
          scope: punctuation.section.group.end.python
          set: after-expression
        - match: ','
          scope: punctuation.separator.tuple.python
        - include: inline-for
        - include: expressions

  lists:
    - match: '(\[)(\s*(\]))\b'
      captures:
        1: punctuation.section.list.begin.python
        2: meta.empty-list.python
        3: punctuation.section.list.end.python
    - match: \[
      scope: punctuation.section.list.begin.python
      push:
        - meta_scope: meta.structure.list.python
        - match: \]
          scope: punctuation.section.list.end.python
          set: after-expression
        - match: ','
          scope: punctuation.separator.list.python
          push: allow-unpack-operators
        - include: inline-for
        - include: expressions

  dictionaries-and-sets:
    - match: '(\{)(\s*(\}))'
      scope: meta.structure.dictionary.python
      captures:
        1: punctuation.section.dictionary.begin.python
        2: meta.empty-dictionary.python
        3: punctuation.section.dictionary.end.python
    - match: \{
      scope: punctuation.section.dictionary-or-set.begin.python
      push:
        - meta_scope: meta.structure.dictionary-or-set.python
        - match: \}
          scope: punctuation.section.dictionary-or-set.end.python
          set: after-expression
        - match: ','
          scope: punctuation.separator.dictionary-or-set.python
          push: allow-unpack-operators
        - match: ':'
          scope: punctuation.separator.key-value.python
        - include: inline-for
        - include: expressions

  builtin-exceptions:
    - match: |-
        (?x)\b(
          (
            Arithmetic|Assertion|Attribute|BlockingIO|BrokenPipe|Buffer|ChildProcess|
            Connection(Aborted|Refused|Reset)?|EOF|Environment|FileExists|
            FileNotFound|FloatingPoint|Interrupted|IO|IsADirectoryError|
            Import|Indentation|Index|Key|Lookup|Memory|Name|NotADirectory|
            NotImplemented|OS|Overflow|Permission|ProcessLookup|Reference|
            Runtime|Standard|Syntax|System|Tab|Timeout|Type|UnboundLocal|
            Unicode(Encode|Decode|Translate)?|Value|VMS|Windows|ZeroDivision
          )Error|
          ((Pending)?Deprecation|Runtime|Syntax|User|Future|Import|Unicode|Bytes)?Warning|
          (Base)?Exception|
          SystemExit|StopIteration|NotImplemented|KeyboardInterrupt|GeneratorExit
        )\b
      scope: support.type.exception.python
  py-builtin-functions:
    - match: |-
        (?x)\b(
          __import__|all|abs|any|apply|ascii|bin|breakpoint|callable|chr|classmethod|cmp|coerce|
          compile|delattr|dir|divmod|enumerate|eval|exec|execfile|filter|format|getattr|
          globals|hasattr|hash|help|hex|id|input|intern|isinstance|issubclass|iter|
          len|locals|map|max|min|mod|next|oct|open|ord|pow|print|property|range|
          raw_input|reduce|reload|repr|reversed|round|setattr|sorted|staticmethod|
          sum|super|type|unichr|vars|zip
        )\b
      scope: support.function.builtin.python
  builtin-types:
    - match: |-
        (?x)\b(
          basestring|bool|buffer|bytearray|bytes|complex|dict|float|frozenset|int|
          list|long|memoryview|object|range|set|slice|str|tuple|unicode|xrange
        )\b
      scope: support.type.python
  name:
    - match: '(?={{identifier}})'
      push:
        - include: name-specials
        - match: '{{identifier_constant}}'
          scope: variable.other.constant.python
        - include: generic-names
        - match: ''
          pop: true

  dotted-name:
    - match: '\s*(\.)\s*(?={{identifier}})'
      captures:
        1: punctuation.accessor.dot.python
      push:
        - include: dotted-name-specials
        - match: '{{identifier_constant}}'
          scope: variable.other.constant.python
        - include: generic-names
        - match: ''
          pop: true

  qualified-name:
    - match: '(?={{path}})'
      push:
        - meta_scope: meta.qualified-name.python
        - include: name
        - include: dotted-name
        - match: ''
          pop: true

  qualified-name-until-leaf:
    # Push this together with another context to match a qualified name
    # until the last non-special identifier (if any).
    # This allows the leaf to be scoped individually.
    - meta_scope: meta.qualified-name.python
    # If a line continuation follows, this may or may not be the last leaf (most likley not though)
    - match: (?={{identifier}}\s*(\.|\\))
      push:
        - include: name-specials
        - include: generic-names
        - match: ''
          pop: true
    - match: (\.)\s*(?={{identifier}}\s*(\.|\\))
      captures:
        1: punctuation.accessor.dot.python
      push:
        - include: dotted-name-specials
        - include: generic-names
        - match: ''
          pop: true
    - match: \.(?!\s*{{identifier}})  # don't match last dot
      scope: punctuation.accessor.dot.python
    - match: (?=\S|$)
      pop: true

  name-specials:
    - include: py-builtin-functions
    - include: builtin-types
    - include: builtin-exceptions
    - include: illegal-names
    - include: magic-function-names
    - include: magic-variable-names
    - include: language-variables

  dotted-name-specials:
    - include: magic-function-names
    - include: magic-variable-names
    - include: illegal-names

  entity-name-class:
    - include: illegal-names
    - include: generic-names

  entity-name-function:
    - include: magic-function-names
    - include: illegal-names
    - include: generic-names

  generic-names:
    - match: '{{identifier}}'
      scope: meta.generic-name.python

  illegal-names:
    - match: \b{{illegal_names}}\b
      scope: invalid.illegal.name.python

  illegal-names-pop:
    - match: \b{{illegal_names}}\b
      scope: invalid.illegal.name.python
      pop: true

  language-variables:
    - match: \b(self|cls)\b
      scope: variable.language.python
    - match: _(?!{{identifier_continue}})
      scope: variable.language.python

  line-continuation:
    - match: (\\)(.*)$\n?
      captures:
        1: punctuation.separator.continuation.line.python
        2: invalid.illegal.unexpected-text.python
    # make sure to resume parsing at next line
      push:
        # This prevents strings after a continuation from being a docstring
        - include: strings
        - match: (?=\S|^\s*$|\n)  # '\n' for when we matched a string earlier
          pop: true

  line-continuation-or-pop:
    - include: line-continuation
    - match: (?=\s*($|;|#))
      pop: true

  magic-function-names:
    # https://docs.python.org/2/reference/datamodel.html
    # https://docs.python.org/3/reference/datamodel.html
    - match: |-
        (?x)\b__(?:
          # unary operators
          invert|neg|pos|abs|
          # binary operators
          add|and|div|divmod|floordiv|lshift|mod|mul|or|pow|rshift|sub|truediv|xor|
          contains|
          # right-hand binary operators
          radd|rand|rdiv|rdivmod|rfloordiv|rlshift|rmod|rmul|ror|rpow|rrshift|rsub|rtruediv|rxor|
          # in-place operator assignments
          iadd|iand|idiv|ifloordiv|ilshift|imod|imul|ior|ipow|irshift|isub|itruediv|ixor|
          # comparisons
          eq|ge|gt|le|lt|ne|
          cmp|rcmp| # py2
          # primary coercion
          bool|str|
          nonzero|unicode| # py2
          # number coercion (converts something to a number)
          bytes|complex|float|index|int|round|
          long| # py2
          # other "coercion"
          format|len|length_hint|hash|repr|reversed|
          coerce|hex|oct| # py2
          fspath|
          # iterator (and 'await')
          iter|next|
          aiter|anext|
          await|
          # attribute and item access
          delattr|delitem|delslice|
          getattr|getattribute|getitem|getslice|
          setattr|setitem|setslice|
          dir|missing|
          # context manager
          enter|exit|
          aenter|aexit|
          # other class magic
          call|del|init|new|init_subclass|
          instancecheck|subclasscheck|
          # pickling
          getnewargs|getnewargs_ex|getstate|setstate|reduce|reduce_ex|
          # descriptors
          delete|get|set|set_name|
          # class-specific
          subclasses|
          # dataclasses (PEP 557)
          post_init|
          # for typing core support (PEP 560)
          class_getitem|mro_entries
        )__\b
      comment: these methods have magic interpretation by python and are generally called indirectly through syntactic constructs
      scope: support.function.magic.python
  magic-variable-names:
    # magic variables which a class/module/object may have.
    # https://docs.python.org/3/library/inspect.html#types-and-members
    # https://docs.python.org/3/reference/datamodel.html#object.__slots__
    # https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace
    - match: |-
        (?x)\b__(?:
          # generic object
          class|dict|doc|module|name|
          # module-specific / global
          all|file|package|
          # functions & methods
          annotations|closure|code|defaults|func|globals|kwdefaults|self|qualname|
          # classes (attributes)
          bases|prepare|slots|metaclass|mro|
          # Python 2
          members|methods
        )__\b
      scope: support.variable.magic.python
  docstrings:
    - match: ^\s*(?=(?i)(ur|ru|u|r)?("""|'''))
      push:
      - match: (?i)(u)?("""|''')
        captures:
          1: storage.type.string.python
          2: punctuation.definition.comment.begin.python
        set:
          - meta_scope: comment.block.documentation.python
          - include: escaped-unicode-char
          - include: escaped-char
          - match: '\2'
            scope: punctuation.definition.comment.end.python
            pop: true
      - match: (?i)(u?ru?)("""|''')
        captures:
          1: storage.type.string.python
          2: punctuation.definition.comment.begin.python
        set:
          - meta_scope: comment.block.documentation.python
          - match: '\2'
            scope: punctuation.definition.comment.end.python
            pop: true

  escaped-char:
    - match: '(\\x\h{2})|(\\[0-7]{3})|(\\[\\"''abfnrtv])'
      captures:
        1: constant.character.escape.hex.python
        2: constant.character.escape.octal.python
        3: constant.character.escape.python
    - match: \\.  # deprecated in 3.6 and will eventually be a syntax error
      scope: invalid.deprecated.character.escape.python

  escaped-unicode-char:
    - match: '(\\U\h{8})|(\\u\h{4})|(\\N\{[a-zA-Z ]+\})'
      captures:
        1: constant.character.escape.unicode.16-bit-hex.python
        2: constant.character.escape.unicode.32-bit-hex.python
        3: constant.character.escape.unicode.name.python

  line-continuation-inside-string:
    - match: (\\)$\n?
      captures:
        1: punctuation.separator.continuation.line.python
    - match: \n
      scope: invalid.illegal.unclosed-string.python
      set: after-expression

  constant-placeholder:
    - match: |- # printf style
        (?x)
        %
          ( \( ({{identifier}}) \) )? # mapping key
          \#?            # alternate form
          0?             # pad with zeros
          \-?            # left-adjust
          \ ?            # implicit sign
          [+-]?          # sign
          (\d*|\*)       # width
          (\. (\d*|\*))? # precision
          [hlL]?         # length modifier (but ignored)
          [acdeEfFgGiorsuxX%]
      scope: constant.other.placeholder.python
      captures:
        2: variable.other.placeholder.python
    - match: '{{strftime_spec}}'
      scope: constant.other.placeholder.python
    - match: '\{\{|\}\}'
      scope: constant.character.escape.python
    - include: formatting-syntax

  formatting-syntax:
    # https://docs.python.org/3.6/library/string.html#formatstrings
    - match: |- # simple form
        (?x)
        (\{)
          (?: [\w.\[\]]+)?             # field_name
          (   ! [ars])?                # conversion
          (   : (?:{{format_spec}}|    # format_spec OR
                   [^}%]*%.[^}]*)      # any format-like string
          )?
        (\})
      scope: constant.other.placeholder.python
      captures:
        1: punctuation.definition.placeholder.begin.python
        2: storage.modifier.conversion.python
        3: constant.other.format-spec.python
        4: punctuation.definition.placeholder.end.python
    - match: \{(?=[^\}"']+\{[^"']*\}) # complex (nested) form
      scope: punctuation.definition.placeholder.begin.python
      push:
        - meta_scope: constant.other.placeholder.python
        - match: \}
          scope: punctuation.definition.placeholder.end.python
          pop: true
        - match: '[\w.\[\]]+'
        - match: '![ars]'
          scope: storage.modifier.conversion.python
        - match: ':'
          push:
            - meta_scope: meta.format-spec.python constant.other.format-spec.python
            - match: (?=\})
              pop: true
            - include: formatting-syntax

  f-string-content:
    # https://www.python.org/dev/peps/pep-0498/
    # https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings
    - match: \{\{|\}\}
      scope: constant.character.escape.python
    - match: \{\s*\}
      scope: invalid.illegal.empty-expression.python
    - match: (?=\{)
      push: f-string-replacement
    - match: \}
      scope: invalid.illegal.stray-brace.python

  f-string-replacement:
    - clear_scopes: 1
    - match: \}
      scope: meta.interpolation.python punctuation.section.interpolation.end.python
      pop: true
    - match: \{
      scope: punctuation.section.interpolation.begin.python
      push:
        - meta_scope: meta.interpolation.python
        - match: (?=\})
          pop: true
        - match: '![ars]'
          scope: storage.modifier.conversion.python
        - match: ':'
          push:
            - meta_scope: meta.format-spec.python constant.other.format-spec.python
            # Because replacements can also be used *within* the format-spec,
            # basically any character is valid and matching {{format_spec}} is useless.
            # - match: '{{format_spec}}'
            - match: (?=\})
              pop: true
            - include: f-string-content
        - match: ''
          push:
            - meta_content_scope: source.python.embedded
            - match: (?=![^=]|:|\})
              pop: true
            - match: \\
              scope: invalid.illegal.backslash-in-fstring.python
            - include: inline-for
            - include: expressions

  string-quoted-double-block:
    # Triple-quoted capital R raw string, unicode or not, no syntax embedding
    - match: '([uU]?R)(""")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.block.python
        - match: '"""'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-unicode-char
    # Triple-quoted capital R raw string, bytes, no syntax embedding
    - match: '([bB]R|R[bB])(""")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.block.python
        - match: '"""'
          scope: punctuation.definition.string.end.python
          set: after-expression
    # Triple-quoted raw string, unicode or not, will detect SQL, otherwise regex
    - match: '([uU]?r)(""")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.block.python
        - match: '(?={{sql_indicator}})'
          set:
            - meta_scope: meta.string.python string.quoted.double.block.python
            - match: '"""'
              scope: punctuation.definition.string.end.python
              set: after-expression
            - match: ''
              push: scope:source.sql
              with_prototype:
                - match: '(?=""")'
                  pop: true
                - include: escaped-unicode-char
                - include: constant-placeholder
        - match: '(?=\S)'
          set:
            - meta_scope: meta.string.python string.quoted.double.block.python
            - match: '"""'
              scope: punctuation.definition.string.end.python
              set: after-expression
            - match: ''
              push: scope:source.regexp.python
              with_prototype:
                - match: '(?=""")'
                  pop: true
                - include: escaped-unicode-char
    # Triple-quoted raw string, bytes, will use regex
    - match: '([bB]r|r[bB])(""")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.block.python
        - match: '"""'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - match: ''
          embed: scope:source.regexp.python
          escape: (?=""")
    # Triple-quoted raw f-string
    - match: ((?i)fr|rf)(""")
      captures:
        1: storage.type.string.python
        2: meta.string.interpolated.python string.quoted.double.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.interpolated.python string.quoted.double.block.python
        - match: '"""'
          scope: punctuation.definition.string.begin.python
          set: after-expression
        - include: f-string-content
    # Triple-quoted f-string
    - match: ((?i)f|f)(""")
      captures:
        1: storage.type.string.python
        2: meta.string.interpolated.python string.quoted.double.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.interpolated.python string.quoted.double.block.python
        - match: '"""'
          scope: punctuation.definition.string.begin.python
          set: after-expression
        - include: escaped-unicode-char
        - include: escaped-char
        - include: f-string-content
    # Triple-quoted string, unicode or not, will detect SQL
    - match: '([uU]?)(""")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.block.python
        - match: '(?={{sql_indicator}})'
          set:
            - meta_scope: meta.string.python string.quoted.double.block.python
            - match: '"""'
              scope: punctuation.definition.string.end.python
              set: after-expression
            - match: ''
              push: scope:source.sql
              with_prototype:
                - match: '(?=""")'
                  pop: true
                - include: escaped-unicode-char
                - include: escaped-char
                - include: constant-placeholder
        - match: '(?=\S)'
          set:
            - meta_scope: meta.string.python string.quoted.double.block.python
            - match: '"""'
              scope: punctuation.definition.string.end.python
              set: after-expression
            - include: escaped-unicode-char
            - include: escaped-char
            - include: constant-placeholder
    # Triple-quoted string, bytes, no syntax embedding
    - match: '([bB])(""")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.block.python
        - match: '"""'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-char
        - include: constant-placeholder

  string-quoted-double:
    # Single-line capital R raw string, unicode or not, no syntax embedding
    - match: '([uU]?R)(")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
    # Single-line capital R raw string, bytes, no syntax embedding
    - match: '([bB]R|R[bB])(")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
    # Single-line raw string, unicode or not, starting with a SQL keyword
    - match: '([uU]?r)(")(?={{sql_indicator}})'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - match: ''
          push: scope:source.sql
          with_prototype:
            - match: '(?="|\n)'
              pop: true
            - include: constant-placeholder
            - include: line-continuation-inside-string
    # Single-line raw string, unicode or not, treated as regex
    - match: '([uU]?r)(")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - match: ''
          push: scope:source.regexp.python
          with_prototype:
            - match: '(?="|\n)'
              pop: true
            - include: line-continuation-inside-string
    # Single-line raw string, bytes, treated as regex
    - match: '([bB]r|r[bB])(")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - match: ''
          embed: scope:source.regexp.python
          escape: (?="|\n)
    # Single-line raw f-string
    - match: ((?i)fr|rf)(")
      captures:
        1: storage.type.string.python
        2: meta.string.interpolated.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.interpolated.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - include: f-string-content
    # Single-line f-string
    - match: ((?i)f|f)(")
      captures:
        1: storage.type.string.python
        2: meta.string.interpolated.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.interpolated.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-unicode-char
        - include: escaped-char
        - include: line-continuation-inside-string
        - include: f-string-content
    # Single-line string, unicode or not, starting with a SQL keyword
    - match: '([uU]?)(")(?={{sql_indicator}})'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - match: ''
          push: scope:source.sql
          with_prototype:
            - match: '(?="|\n)'
              pop: true
            - include: escaped-unicode-char
            - include: escaped-char
            - include: line-continuation-inside-string
            - include: constant-placeholder
    # Single-line string, unicode or not
    - match: '([uU]?)(")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-unicode-char
        - include: escaped-char
        - include: line-continuation-inside-string
        - include: constant-placeholder
    # Single-line string, bytes
    - match: '([bB])(")'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.double.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.double.python
        - match: '"'
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-char
        - include: line-continuation-inside-string
        - include: constant-placeholder

  string-quoted-single-block:
    # Triple-quoted capital R raw string, unicode or not, no syntax embedding
    - match: ([uU]?R)(''')
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.block.python
        - match: "'''"
          scope: punctuation.definition.string.end.python
          set: after-expression
    # Triple-quoted capital R raw string, bytes, no syntax embedding
    - match: ([bB]R|R[bB])(''')
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.block.python
        - match: "'''"
          scope: punctuation.definition.string.end.python
          set: after-expression
    # Triple-quoted raw string, unicode or not, will detect SQL, otherwise regex
    - match: ([uU]?r)(''')
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.block.python
        - match: '(?={{sql_indicator}})'
          set:
            - meta_scope: meta.string.python string.quoted.single.block.python
            - match: "'''"
              scope: punctuation.definition.string.end.python
              set: after-expression
            - match: ''
              push: scope:source.sql
              with_prototype:
                - match: (?=''')
                  pop: true
                - include: escaped-unicode-char
                - include: escaped-char
                - include: constant-placeholder
        - match: '(?=\S)'
          set:
            - meta_scope: meta.string.python string.quoted.single.block.python
            - match: "'''"
              scope: punctuation.definition.string.end.python
              set: after-expression
            - match: ''
              push: scope:source.regexp.python
              with_prototype:
                - match: (?=''')
                  pop: true
                - include: escaped-unicode-char
    # Triple-quoted raw string, bytes, will use regex
    - match: ([bB]r|r[bB])(''')
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.block.python
        - match: "'''"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - match: ''
          embed: scope:source.regexp.python
          escape: (?=''')
    # Triple-quoted raw f-string
    - match: ((?i)fr|rf)(''')
      captures:
        1: storage.type.string.python
        2: meta.string.interpolated.python string.quoted.single.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.interpolated.python string.quoted.single.block.python
        - match: "'''"
          scope: punctuation.definition.string.begin.python
          set: after-expression
        - include: f-string-content
    # Triple-quoted f-string
    - match: ([fF])(''')
      captures:
        1: storage.type.string.python
        2: meta.string.interpolated.python string.quoted.single.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.interpolated.python string.quoted.single.block.python
        - match: "'''"
          scope: punctuation.definition.string.begin.python
          set: after-expression
        - include: escaped-unicode-char
        - include: escaped-char
        - include: f-string-content
    # Triple-quoted string, unicode or not, will detect SQL
    - match: ([uU]?)(''')
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.block.python
        - match: '(?={{sql_indicator}})'
          set:
            - meta_scope: meta.string.python string.quoted.single.block.python
            - match: "'''"
              scope: punctuation.definition.string.end.python
              set: after-expression
            - match: ''
              push: scope:source.sql
              with_prototype:
                - match: (?=''')
                  pop: true
                - include: escaped-unicode-char
                - include: escaped-char
                - include: constant-placeholder
        - match: '(?=\S)'
          set:
            - meta_scope: meta.string.python string.quoted.single.block.python
            - match: "'''"
              scope: punctuation.definition.string.end.python
              set: after-expression
            - include: escaped-unicode-char
            - include: escaped-char
            - include: constant-placeholder
    # Triple-quoted string, bytes, no syntax embedding
    - match: ([bB])(''')
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.block.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.block.python
        - match: "'''"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-char
        - include: constant-placeholder

  string-quoted-single:
    # Single-line capital R raw string, unicode or not, no syntax embedding
    - match: '([uU]?R)('')'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
    # Single-line capital R raw string, bytes, no syntax embedding
    - match: '([bB]R|R[bB])('')'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
    # Single-line raw string, unicode or not, starting with a SQL keyword
    - match: '([uU]?r)('')(?={{sql_indicator}})'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - match: ''
          push: scope:source.sql
          with_prototype:
            - match: '(?=''|\n)'
              pop: true
            - include: line-continuation-inside-string
            - include: constant-placeholder
    # Single-line raw string, unicode or not, treated as regex
    - match: '([uU]?r)('')'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - match: ''
          push: scope:source.regexp.python
          with_prototype:
            - match: '(?=''|\n)'
              pop: true
            - include: line-continuation-inside-string
    # Single-line raw string, bytes, treated as regex
    - match: '([bB]r|r[bB])('')'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - match: ''
          push: scope:source.regexp.python
          with_prototype:
            - match: '(?=''|\n)'
              pop: true
            - include: line-continuation-inside-string
    # Single-line raw f-string
    - match: ((?i)fr|rf)(')
      captures:
        1: storage.type.string.python
        2: meta.string.interpolated.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.interpolated.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - include: f-string-content
    # Single-line f-string
    - match: ((?i)f|f)(')
      captures:
        1: storage.type.string.python
        2: meta.string.interpolated.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.interpolated.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-unicode-char
        - include: escaped-char
        - include: line-continuation-inside-string
        - include: f-string-content
    # Single-line string, unicode or not, starting with a SQL keyword
    - match: '([uU]?)('')(?={{sql_indicator}})'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: line-continuation-inside-string
        - match: ''
          push: scope:source.sql
          with_prototype:
            - match: '(?=''|\n)'
              pop: true
            - include: escaped-unicode-char
            - include: escaped-char
            - include: line-continuation-inside-string
            - include: constant-placeholder
    # Single-line string, unicode or not
    - match: '([uU]?)('')'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-unicode-char
        - include: escaped-char
        - include: line-continuation-inside-string
        - include: constant-placeholder
    # Single-line string, bytes
    - match: '([bB])('')'
      captures:
        1: storage.type.string.python
        2: meta.string.python string.quoted.single.python punctuation.definition.string.begin.python
      push:
        - meta_content_scope: meta.string.python string.quoted.single.python
        - match: "'"
          scope: punctuation.definition.string.end.python
          set: after-expression
        - include: escaped-char
        - include: line-continuation-inside-string
        - include: constant-placeholder

  py-strings:
    # block versions must be matched first
    - include: string-quoted-double-block
    - include: string-quoted-double
    - include: string-quoted-single-block
    - include: string-quoted-single

  inline-for:
    - match: \b(?:(async)\s+)?(for)\b
      captures:
        1: storage.modifier.async.python
        2: keyword.control.flow.for.generator.python
      push:
        - include: comments
        - meta_scope: meta.expression.generator.python
        - match: \b(in)\b
          scope: keyword.control.flow.for.in.python
          pop: true
        - match: '(?=[)\]}])'
          scope: invalid.illegal.missing-in.python
          pop: true
        - include: illegal-names-pop
        - include: target-list

  inline-if:
    - match: \b(if)\b
      scope: keyword.control.flow.if.inline.python
    - match: \b(else)\b
      scope: keyword.control.flow.else.inline.python

  target-list:
    - match: ','
      scope: punctuation.separator.target-list.python
    - match: \(
      scope: punctuation.section.target-list.begin.python
      push:
        - include: comments
        - match: ','
          scope: punctuation.separator.target-list.python
        - match: \)
          scope: punctuation.section.target-list.end.python
          pop: true
        - include: target-list
        - include: name
    - include: name


  line-continuation-or-pop-at-end:
    - include: pop-at-end
    - include: line-continuation

  pop-at-end:
    - match: $
      pop: true

  any-escape:
    - match: \\.
      scope: constant.character.escape.shell

  bash-line-continuation:
    - match: \\\n
      scope: punctuation.separator.continuation.line.shell
      push:
        - match: ^
          pop: true
    - match: \\(\s+)\n
      captures:
        1: invalid.illegal.extraneous-spaces-after-line-continuation.shell

  prototype:
    - include: bash-line-continuation
    - include: any-escape

  bash:
    - include: comments
    - include: funcdef
    - include: vardef
    - include: redirection
    - match: '{{is_command}}'
      push: cmd

  # NOTE: Contexts with a "-bt" suffix are the "backtick" contexts. They mirror
  # the ordinary contexts, except that when a backtick is encountered while in
  # a "-bt" context, we pop.
  # Normally, we are in a non-bt context. When we encounter a backtick character
  # (the ` character), we enter the main-bt context. Popping when encountering
  # another ` character then ensures that we don't enter yet another backtick
  # context.
  # The "expansion" context is the **only** place where this main-bt context is
  # used. If you, the reader, knows of a more elegant way to handle backticks,
  # don't hesitate to change it.
  main-bt:
    - include: funcdef-bt
    - include: vardef
    - include: redirection
    - match: '{{is_command}}'
      push: cmd-bt

  control:
    - match: \b(if){{keyword_boundary_end}}(?:\s*(!))?
      captures:
        1: keyword.control.if.begin.shell
        2: keyword.operator.logical.shell
    - match: \bthen\b
      scope: keyword.control.if.then.shell
      pop: true
    - match: \b(elif){{keyword_boundary_end}}(?:\s*(!))?
      captures:
        1: keyword.control.if.elif.shell
        2: keyword.operator.logical.shell
    - match: \bfi{{keyword_boundary_end}}
      scope: keyword.control.if.end.shell
      set: [cmd-post, cmd-args]
    - match: \belse{{keyword_boundary_end}}
      scope: keyword.control.if.else.shell
      pop: true
    - match: \bfor{{keyword_boundary_end}}
      scope: keyword.control.for.shell
      set: [cmd-post, for-args]
    - match: \bdo{{keyword_boundary_end}}
      scope: keyword.control.do.shell
      pop: true
    - match: \bdone{{keyword_boundary_end}}
      scope: keyword.control.done.shell
      set: [cmd-post, cmd-args]
    - match: \bwhile{{keyword_boundary_end}}
      scope: keyword.control.while.shell
    - match: \buntil{{keyword_boundary_end}}
      scope:  keyword.control.until.shell
    - match: \bcase{{keyword_boundary_end}}
      scope: keyword.control.case.begin.shell
      set: [case-body, case-item, case-item-first-character, case-preamble]
    - match: \bcontinue{{keyword_boundary_end}}
      scope: keyword.control.flow.continue.shell
    - match: \bbreak{{keyword_boundary_end}}
      scope: keyword.control.flow.break.shell
      set: [cmd-post, cmd-args]

  case-preamble:
    - match: \bin(?=[^\w_-])
      scope: keyword.control.case.in.shell
      pop: true
    - include: expansion-and-string

  case-item-highlights:
    - include: expansion-and-string
    - match: \|
      scope: keyword.operator.logical.shell
    - match: \(
      scope: punctuation.section.parens.begin.shell
      push: case-item-inside

  case-item-inside:
    - match: \)
      scope: punctuation.section.parens.end.shell
      pop: true
    - include: case-item-highlights

  case-item:
    - match: \)
      scope: keyword.control.case.item.shell
      pop: true
    - include: case-item-highlights

  case-item-first-character:
    - match: (?=\()
      set:
        - match: \(
          scope: keyword.control.case.item.shell
          pop: true
    - match: (?=\S)
      pop: true

  case-body:
    - match: \s*(;;&?|;&)
      captures:
        1: punctuation.terminator.case.shell
      set:
        # An opening parenthesis is optional
        - match: (?=\()
          set:
            - match: \(
              scope: keyword.control.case.item.shell
              set: case-body-item
        - match: (?=\S)
          set: case-body-item
    - match: \s*\b(esac)\b
      captures:
        1: keyword.control.case.end.shell
      pop: true
    - include: main

  case-body-item:
    - match: \besac\b
      scope: keyword.control.case.end.shell
      pop: true
    - match: \)
      scope: keyword.control.case.item.shell
      set: case-body
    - include: case-item-highlights

  # I don't think anybody will write a for-loop inside backticks. Hence no
  # for-args-bt context.
  for-args:
    - match: ""
      set:
        - meta_scope: meta.group.for.shell
        - include: cmd-args-boilerplate
        - include: arithmetic
        - match: \bin\b
          scope: keyword.control.in.shell

  expansion-and-string:
    - include: bash-string
    - include: expansion

  funcdef:
    - match: '{{is_function}}'
      captures:
        1: storage.type.function.shell
      push: [funcdef-body, funcdef-parens, funcdef-name]
    - match: \bcoproc{{keyword_boundary_end}}
      scope: keyword.other.coproc.shell
      push: [cmd-post, cmd-args, coproc-body]

  funcdef-bt:
    - match: '{{is_function}}'
      captures:
        1: storage.type.function.shell
      push: [funcdef-body-bt, funcdef-parens, funcdef-name]
    - match: \bcoproc{{keyword_boundary_end}}
      scope: keyword.other.coproc.shell
      push: [cmd-post, cmd-args-bt, coproc-body]

  coproc-body:
    - match: \s*(?=\S+\s*\{)
      set:
        - meta_content_scope: entity.name.function.coproc.shell
        - match: (?=\s*\{)
          set:
            - match: \{
              scope: punctuation.section.braces.begin.shell
              set:
                - meta_scope: meta.function.coproc.shell
                - match: \}
                  scope: punctuation.section.braces.end.shell
                  pop: true
                - include: main
    - match: ""
      set: main-with-pop-at-end

  funcdef-name:
    - match: \s*
      set:
        - meta_content_scope: entity.name.function.shell
        - match: (?=\s*[({]|$)
          pop: true

  funcdef-parens:
    - match: (\()\s*(\))
      captures:
        1: punctuation.section.parens.begin.shell
        2: punctuation.section.parens.end.shell
    - match: \{
      scope: punctuation.section.braces.begin.shell
      pop: true
    - match: \(
      scope: punctuation.definition.compound.begin.shell
      pop: true

  funcdef-body:
    - meta_scope: meta.function.shell
    - match: \}
      scope: punctuation.section.braces.end.shell
      pop: true
    - match: \)
      scope: punctuation.definition.compound.end.shell
      pop: true
    - include: main

  funcdef-body-bt:
    - meta_scope: meta.function.shell
    - match: \}
      scope: punctuation.section.braces.end.shell
      pop: true
    - match: \)
      scope: punctuation.definition.compound.end.shell
      pop: true
    - include: main-bt

  vardef:
    - match: \s*\b(alias){{keyword_boundary_end}}
      captures:
        1: support.function.alias.shell
      push:
      - vardef-ensure-function-call-scope
      - vardef-maybe-more
      - vardef-value
      - vardef-assign
      - vardef-alias-name
      - vardef-alias-options
    - match: \s*\b(typeset|declare|local){{keyword_boundary_end}}
      captures:
        1: storage.modifier.shell
      push:
      - vardef-ensure-function-call-scope
      - vardef-maybe-more
      - vardef-value
      - vardef-assign
      - vardef-name
      - vardef-declare-options
    - match: \s*\b(export){{keyword_boundary_end}}
      captures:
        1: storage.modifier.shell
      push:
      - vardef-ensure-function-call-scope
      - vardef-maybe-more
      - vardef-value
      - vardef-assign
      - vardef-name
      - vardef-export-options
    - match: \s*\b(readonly){{keyword_boundary_end}}
      captures:
        1: storage.modifier.shell
      push:
      - vardef-ensure-function-call-scope
      - vardef-maybe-more
      - vardef-value
      - vardef-assign
      - vardef-name
      - vardef-readonly-options
    - match: '{{is_variable}}'
      push:
      - vardef-value
      - vardef-assign
      - vardef-name

  vardef-readonly-options:
    - match: \s*((-)(?:[aAf]+|p))
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: \s*
      pop: true

  vardef-export-options:
    - match: \s*((-)(?:[fn]+|p))
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: \s*
      pop: true

  vardef-ensure-function-call-scope:
    - meta_include_prototype: false
    - meta_scope: meta.function-call.shell
    - match: ""
      pop: true

  vardef-maybe-more:
    - meta_include_prototype: false
    - match: (?=`)
      pop: true
    - match: (?=\s*#)
      pop: true
    - include: cmd-args-boilerplate
    - match: (?=\S)
      push:
      - vardef-value
      - vardef-assign
      - vardef-name

  vardef-alias-options:
    - match: \s*((-)p)
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: \s*
      pop: true

  vardef-alias-name:
    - match: \s*
      set:
        - meta_include_prototype: false
        - meta_content_scope: entity.name.function.alias.shell
        - include: line-continuation-or-pop-at-end
        - include: any-escape
        - match: (?={{varassign}}|\s)|$
          pop: true
        - include: array
        - match: \s*$
          pop: true
        - include: bash-string

  vardef-declare-options:
    - match: \s*((-)(?:[aAfFgilnrtux]+|p))
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: \s*
      pop: true

  vardef-name:
    - match: \s*
      set:
        - meta_include_prototype: false
        - meta_content_scope: variable.other.readwrite.assignment.shell
        - include: line-continuation-or-pop-at-end
        - include: any-escape
        - match: (?={{varassign}}|\s)|$|(?=[;&`]|{{metachar}})
          pop: true
        - include: array
        - match: \s*$
          pop: true
        - include: bash-string

  vardef-assign:
    - meta_include_prototype: false
    - include: line-continuation-or-pop-at-end
    - include: any-escape
    - match: '{{varassign}}'
      scope: keyword.operator.assignment.shell
      pop: true
    - match: ""
      pop: true

  vardef-value:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.parens.begin.shell
      set:
        - match: \)
          scope: punctuation.section.parens.end.shell
          pop: true
        - match: \[
          scope: punctuation.section.brackets.begin.shell
          push:
            - match: \]
              scope: punctuation.section.brackets.end.shell
              set:
                - match: =
                  scope: keyword.operator.assignment.shell
                  pop: true
                - match: ""
                  pop: true
            - include: expansion-and-string
        - include: expansion-and-string
    - match: (?=[&`])
      pop: true
    - match: ""
      set:
        - meta_include_prototype: false
        - meta_scope: string.unquoted.shell
        - match: (?=`)
          pop: true
        - include: expansion-and-string
        - include: line-continuation-or-pop-at-end
        - include: any-escape
        - match: (?={{metachar}})
          pop: true

  redirection:
    - include: redirection-here-string
    - include: redirection-here-document
    - include: redirection-process
    - include: redirection-input
    - include: redirection-output
    - include: redirection-inout

  redirection-process:
    - match: (\d*)([<>])(\()
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.process.shell
        3: punctuation.section.parens.begin.shell
      push:
        - match: \)
          scope: punctuation.section.parens.end.shell
          pop: true
        - include: main

  redirection-output:
    - match: (\d*)(>>!?|>&?|&>|&?>(?:\||>))
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
      push: redirection-post

  redirection-input:
    - match: (\d*)(<&?)
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
      push: redirection-post

  redirection-post:
    - match: \s*(?:(\d+)|(-))
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: punctuation.terminator.file-descriptor.shell
      pop: true
    - match: \s*(?=\S)
      set:
        - match: (?={{metachar}}|`)
          pop: true
        - include: expansion-and-string
    - match: \s*
      pop: true

  redirection-inout:
    - match: (\d*)(<>)
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell

  redirection-here-string:
    - match: (\d*)(<<<)\s
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.herestring.shell

  redirection-here-document:
    # These are the variants that allow tabs before the end token
    - match: (\d*)(<<-)\s*(')({{bash-identifier}})(')
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
        3: punctuation.definition.string.begin.shell
        4: keyword.control.heredoc-token.shell
        5: punctuation.definition.string.end.shell
      push: [heredocs-body-allow-tabs-no-expansion, heredocs-preamble]
    - match: (\d*)(<<-)\s*(")({{bash-identifier}})(")
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
        3: punctuation.definition.string.begin.shell
        4: keyword.control.heredoc-token.shell
        5: punctuation.definition.string.end.shell
      push: [heredocs-body-allow-tabs-no-expansion, heredocs-preamble]
    - match: (\d*)(<<-)\s*(\\)({{bash-identifier}})
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
        3: punctuation.definition.string.shell
        4: keyword.control.heredoc-token.shell
      push: [heredocs-body-allow-tabs-no-expansion, heredocs-preamble]
    - match: (\d*)(<<-)\s*({{bash-identifier}})
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
        3: keyword.control.heredoc-token.shell
      push: [heredocs-body-allow-tabs, heredocs-preamble]
    # These are the variants that DON'T allow tabs before the end token
    - match: (\d*)(<<)\s*(')({{bash-identifier}})(')
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
        3: punctuation.definition.string.begin.shell
        4: keyword.control.heredoc-token.shell
        5: punctuation.definition.string.end.shell
      push: [heredocs-body-no-expansion, heredocs-preamble]
    - match: (\d*)(<<)\s*(")({{bash-identifier}})(")
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
        3: punctuation.definition.string.begin.shell
        4: keyword.control.heredoc-token.shell
        5: punctuation.definition.string.end.shell
      push: [heredocs-body-no-expansion, heredocs-preamble]
    - match: (\d*)(<<)\s*(\\)({{bash-identifier}})
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
        3: punctuation.definition.string.shell
        4: keyword.control.heredoc-token.shell
      push: [heredocs-body-no-expansion, heredocs-preamble]
    - match: (\d*)(<<)\s*({{bash-identifier}})
      captures:
        1: constant.numeric.integer.decimal.file-descriptor.shell
        2: keyword.operator.assignment.redirection.shell
        3: keyword.control.heredoc-token.shell
      push: [heredocs-body, heredocs-preamble]

  heredocs-body:
    - meta_include_prototype: false
    - meta_scope: string.unquoted.heredoc.shell
    - include: heredocs-body-common-with-expansion
    - match: ^\3(\s+)\n # the third capture from redirection-here-document
      captures:
        1: invalid.illegal.no-spaces-allowed-after-heredoc-token.shell
      # rather not pop, but sublime throws an error otherwise.
      pop: true
    - match: ^\3$ # the third capture from redirection-here-document
      scope: keyword.control.heredoc-token.shell
      pop: true

  heredocs-body-allow-tabs:
    - meta_include_prototype: false
    - meta_scope: string.unquoted.heredoc.shell
    - include: heredocs-body-common-with-expansion
    - match: ^\s*\3(\s+)\n # the third capture from redirection-here-document
      captures:
        1: invalid.illegal.no-spaces-allowed-after-heredoc-token.shell
      # rather not pop, but sublime throws an error otherwise.
      pop: true
    - match: ^\s*(\3)$ # the third capture from redirection-here-document
      captures:
        1: keyword.control.heredoc-token.shell
      pop: true

  heredocs-body-common-with-expansion:
    # [Bash] 3.6.6: all lines of the here-document are subjected to parameter
    # expansion, command substitution, and arithmetic expansion, the character
    # sequence \newline is ignored, and ‘\’ must be used to quote the
    # characters ‘\’, ‘$’, and ‘`’.
    - match: \\[`$"\\]
      scope: constant.character.escape.backtick.shell
    - include: expansion-parameter
    - include: expansion-arithmetic
    - include: expansion-command

  heredocs-body-no-expansion:
    - meta_include_prototype: false
    - meta_scope: string.unquoted.heredoc.shell
    - match: ^\4(\s+)\n # the fourth capture from redirection-here-document
      captures:
        1: invalid.illegal.no-spaces-allowed-after-heredoc-token.shell
      # rather not pop, but sublime throws an error otherwise.
      pop: true
    - match: ^\4$ # the fourth capture from redirection-here-document
      scope: keyword.control.heredoc-token.shell
      pop: true

  heredocs-body-allow-tabs-no-expansion:
    - meta_include_prototype: false
    - meta_scope: string.unquoted.heredoc.shell
    - match: ^\s*\4(\s+)\n # the fourth capture from redirection-here-document
      captures:
        1: invalid.illegal.no-spaces-allowed-after-heredoc-token.shell
      # rather not pop, but sublime throws an error otherwise.
      pop: true
    - match: ^\s*(\4)$ # the fourth capture from redirection-here-document
      captures:
        1: keyword.control.heredoc-token.shell
      pop: true

  heredocs-preamble:
    - match: ""
      set:
        # This enables us to keep parsing on the line where the start token of
        # the heredoc is. Once the first line has ended, we enter the body of
        # the heredoc, where everything is just an unquoted string.
        # One clear_scope for the string.unquoted.
        # The problem with this is that when we also end a function definition
        # on the same line (with the "}" token), we cannot do that.
        - clear_scopes: 1
        - match: $
          pop: true
        - match: \s*(?=\S)
          push: [main-with-pop-at-end, cmd-post, cmd-args]

  main-with-pop-at-end:
    - include: line-continuation-or-pop-at-end
    - include: main

  cmd-name-common:
    - match: (?=}|\s+#|\s*(?:[|;]|&(?!>)))
      pop: true
    - include: bash-string
    - include: expansion-parameter
    - include: expansion-arithmetic
    - include: expansion-command
    - include: expansion-tilde
    - include: expansion-job
    - include: line-continuation-or-pop-at-end

  cmd-args-common:
    - match: (?=}|\s+#)
      pop: true
    - include: redirection
    - match: (?=\s*([|;]|&(?!>)))
      pop: true
    - include: expansion-and-string
    - include: line-continuation-or-pop-at-end

  cmd-post: # looks like [main, cmd-post] at this point
    - match: ""
      set:
        - meta_content_scope: meta.post-cmd.shell
        - match: '{{reset_semicolon}}'
          captures:
            1: keyword.operator.logical.continue.shell
          pop: true
        - match: '{{reset_or}}'
          captures:
            1: keyword.operator.logical.or.shell
          pop: true
        - match: '{{reset_pipe}}'
          captures:
            1: keyword.operator.logical.pipe.shell
          pop: true
        - match: '{{reset_and}}'
          captures:
            1: keyword.operator.logical.and.shell
          pop: true
        - match: '{{reset_job}}'
          captures:
            1: keyword.operator.logical.job.shell
          pop: true
        - match: ""
          pop: true

  cmd-args-boilerplate:
    - match: (?={{is_end_of_interpolation}})
      pop: true
    - include: cmd-args-common
    - match: (?:\s+|^)--(?=\s|$)
      scope: keyword.operator.end-of-options.shell
      set:
        - meta_content_scope: meta.function-call.arguments.shell
        - include: end-of-options-common

  cmd-args-boilerplate-bt:
    - match: (?={{is_end_of_interpolation}}|`) # <-------------- extra backtick
      pop: true
    - include: cmd-args-common
    - match: (?:\s+|^)--(?=\s|$)
      scope: keyword.operator.end-of-options.shell
      set:
        - meta_content_scope: meta.function-call.arguments.shell
        - match: (?=`) # <-------------------------------------- extra backtick
          pop: true
        - include: end-of-options-common

  end-of-options-common:
    - include: redirection
    - match: (?=[)};&|])
      pop: true
    - include: expansion-and-string
    - include: line-continuation-or-pop-at-end

  cmd-args:
    - match: ""
      set:
        - meta_scope: meta.function-call.arguments.shell
        - include: cmd-args-boilerplate
        - match: '{{start_of_option}}'
          scope: punctuation.definition.parameter.shell
          push:
            - meta_scope: variable.parameter.option.shell
            - match: (?==)
              set:
                - match: =
                  scope: keyword.operator.assignment.option.shell
                  pop: true
            - match: (?={{is_end_of_option}})
              pop: true
            - include: expansion-and-string

  cmd-args-bt:
    - match: ""
      set:
        - meta_scope: meta.function-call.arguments.shell
        - include: cmd-args-boilerplate-bt
        - match: '{{start_of_option}}'
          scope: punctuation.definition.parameter.shell
          push:
            - meta_scope: variable.parameter.option.shell
            - match: (?==)
              set:
                - match: =
                  scope: keyword.operator.assignment.option.shell
                  pop: true
            - match: (?={{is_end_of_option}}|`) # <------------- extra backtick
              pop: true
            - include: expansion-and-string

  cmd:
    - include: cmd-common
    - match: \(
      scope: punctuation.definition.compound.begin.shell
      push:
        - match: \)
          scope: punctuation.definition.compound.end.shell
          set: [cmd-post, cmd-args]
        - include: main
    - include: scope:commands.builtin.shell.bash#main
    - match: \blet\b
      scope: support.function.let.bash
      push:
        - meta_scope: meta.function-call.shell
        - match: $
          pop: true
        - include: expression
    - match: (\[\[)(?=\s)
      captures:
        1: support.function.double-brace.begin.shell
      set: [cmd-post, cmd-test-double-brace-args]
    - match: (\[)(?=\s)
      captures:
        1: support.function.test.begin.shell
      set: [cmd-post, cmd-test-brace-args]
    - match: (\{)(?=\s)
      captures:
        1: punctuation.definition.compound.braces.begin.shell
      push:
        - match: \}
          scope: punctuation.definition.compound.braces.end.shell
          set: [cmd-post, cmd-args]
        - include: main
    - match: (?=\S)
      set: [cmd-post, cmd-args, cmd-name]

  cmd-bt:
    - include: cmd-common
    - match: \(
      scope: punctuation.definition.compound.begin.shell
      push:
        - match: \)
          scope: punctuation.definition.compound.end.shell
          set: [cmd-post, cmd-args-bt]
        - include: main
    - include: scope:commands.builtin.shell.bash#main-bt
    - match: \blet\b
      scope: support.function.let.bash
      push:
        - meta_scope: meta.function-call.shell
        - match: $|(?=\`)
          pop: true
        - include: expression
    - match: (\[\[)(?=\s)
      captures:
        1: support.function.double-brace.begin.shell
      set: [cmd-post, cmd-test-double-brace-args-bt]
    - match: (\[)(?=\s)
      captures:
        1: support.function.test.begin.shell
      set: [cmd-post, cmd-test-brace-args-bt]
    - match: (\{)(?=\s)
      captures:
        1: punctuation.definition.compound.braces.begin.shell
      push:
        - match: \}
          scope: punctuation.definition.compound.braces.end.shell
          set: [cmd-post, cmd-args-bt]
        - include: main-bt
    - match: (?=\S)
      set: [cmd-post, cmd-args-bt, cmd-name-bt]

  cmd-test-brace-args:
    - match: ""
      set:
        - meta_scope: meta.function-call.arguments.shell
        - include: cmd-args-boilerplate
        - match: \s+(\])
          captures:
            1: support.function.test.end.shell
          pop: true
        - include: expression-test

  cmd-test-brace-args-bt:
    - match: ""
      set:
        - meta_scope: meta.function-call.arguments.shell
        - include: cmd-args-boilerplate-bt
        - match: \s+(\])
          captures:
            1: support.function.test.end.shell
          pop: true
        - include: expression-test

  cmd-test-double-brace-args:
    - meta_scope: meta.function-call.arguments.shell
    - match: \s+(\]\])
      captures:
        1: support.function.double-brace.end.shell
      pop: true
    - include: expression-test
    # - include: cmd-args-boilerplate

  cmd-test-double-brace-args-bt:
    - meta_scope: meta.function-call.arguments.shell
    - match: \s+(\]\])
      captures:
        1: support.function.double-brace.end.shell
      pop: true
    - include: expression-test
    # - include: cmd-args-boilerplate-bt

  cmd-name:
    - match: ""
      set:
        - meta_scope: meta.function-call.shell variable.function.shell
        - match: (?={{is_start_of_arguments}}|{{is_end_of_interpolation}})
          pop: true
        - include: cmd-name-common

  cmd-name-bt:
    - match: ""
      set:
        - meta_scope: meta.function-call.shell variable.function.shell
        # extra backtick
        - match: (?={{is_start_of_arguments}}|{{is_end_of_interpolation}}|`)
          pop: true
        - include: cmd-name-common

  cmd-common:
    - include: control
    - include: arithmetic
    - match: (?=\)|})
      pop: true
    - include: line-continuation-or-pop-at-end

  arithmetic:
    - match: \(\((?=.+\)\))
      scope: punctuation.section.arithmetic.begin.shell
      push:
        - meta_scope: meta.group.arithmetic.shell
        - match: \)\)
          scope: punctuation.section.arithmetic.end.shell
          pop: true
        - include: expression

  expansion-tilde:
    - match: '~'
      scope: meta.group.expansion.tilde variable.language.tilde.shell

  expansion-brace:
    - match: \{
      scope: punctuation.section.expansion.brace.begin.shell
      push:
        - meta_scope: meta.group.expansion.brace.shell
        - match: \}
          scope: punctuation.section.expansion.brace.end.shell
          pop: true
        - match: \,
          scope: punctuation.separator.shell
        - include: expansion-and-string

  expansion-parameter:
    - match: (\$)(\{)
      captures:
        0: meta.group.expansion.parameter.shell
        1: punctuation.definition.variable.shell
        2: punctuation.section.expansion.parameter.begin.shell
      push:
        - meta_content_scope: meta.group.expansion.parameter.shell
        - meta_include_prototype: false
        - match: \!
          scope: keyword.operator.indirection.shell
          set: expansion-parameter-post-first-character
        - match: \#
          scope: keyword.operator.arithmetic.shell
          set: expansion-parameter-post-first-character
        - match: ""
          set: expansion-parameter-post-first-character
    - match: (\$)(\d)
      captures:
        0: meta.group.expansion.parameter.shell
        1: punctuation.definition.variable.shell
        2: variable.other.readwrite.shell
    - match: (\$)([$#@!~*?_-])(?!\w)
      captures:
        0: meta.group.expansion.parameter.shell
        1: punctuation.definition.variable.shell
        2: variable.language.shell
    - match: (\$)({{bash-identifier}})
      captures:
        0: meta.group.expansion.parameter.shell
        1: punctuation.definition.variable.shell
        2: variable.other.readwrite.shell

  expansion-pattern:
    - match: ([?*+@!])(\()
      captures:
        1: keyword.operator.regexp.quantifier.shell
        2: punctuation.section.parens.begin.shell
      push:
        - match: \)
          scope: punctuation.section.parens.end.shell
          pop: true
        - match: \|
          scope: keyword.operator.logical.or.shell
        - include: expansion-and-string
    - match: '[*?]'
      scope: keyword.operator.regexp.quantifier.shell
    - match: \[(?=.*])
      scope: keyword.control.regexp.set.begin.shell
      push:
        - match: (?=])
          set: expansion-pattern-post-first-char
        - match: '[!^]'
          scope: keyword.operator.logical.not.shell
          set: expansion-pattern-post-first-char
        - match: \-
          set: expansion-pattern-post-first-char
        - match: ""
          set: expansion-pattern-post-first-char

  expansion-pattern-post-first-char:
    - match: (?:-)?(\])
      captures:
        1: keyword.control.regexp.set.end.shell
      pop: true
    - match: \-
      scope: keyword.operator.word.shell
    - match: (\.)[[:word:]](\.)
      captures:
        1: punctuation.separator.collate.begin.shell
        2: punctuation.separator.collate.end.shell
    - match: (=)[[:word:]](=)
      captures:
        1: punctuation.separator.equivalence-class.begin.shell
        2: punctuation.separator.equivalence-class.end.shell
    - match: (:)[[:lower:]]+(:)
      captures:
        1: punctuation.separator.character-class.begin.shell
        2: punctuation.separator.character-class.end.shell
    # You cannot have a regex set inside a regex set, so just consume this
    # character in order to not push into another regex set.
    # Except when writing a character class like [:lower:], so negative look
    # ahead for that possibility.
    - match: \[(?![\.=:])
    - include: expansion-and-string

  expansion-arithmetic:
    - match: (\$)(\(\()(?=.+\)\))
      captures:
        1: punctuation.definition.variable.shell
        2: punctuation.section.parens.begin.shell
      push:
        - meta_scope: meta.group.expansion.arithmetic.shell
        - match: \)\)
          scope: punctuation.section.parens.end.shell
          pop: true
        - include: expression

  expansion-command:
    - match: (\$)(\()
      captures:
        1: punctuation.definition.variable.shell
        2: punctuation.section.parens.begin.shell
      push:
        - meta_scope: meta.group.expansion.command.parens.shell
        - match: \s*(\))
          captures:
            1: punctuation.section.parens.end.shell
          pop: true
        - include: main
    - match: \`
      scope: punctuation.section.group.begin.shell
      push:
        - meta_scope: meta.group.expansion.command.backticks.shell
        - match: \`
          scope: punctuation.section.group.end.shell
          pop: true
        - include: main-bt # all those *-bt contexts just for this!!!!

  expansion:
    - include: expansion-pattern
    - include: expansion-parameter
    - include: expansion-brace
    - include: expansion-arithmetic
    - include: expansion-command
    - include: expansion-tilde
    - include: expansion-job

  expansion-parameter-common:
    - meta_content_scope: meta.group.expansion.parameter.shell
    - match: \}
      scope:
        meta.group.expansion.parameter.shell
        punctuation.section.expansion.parameter.end.shell
      pop: true
    - include: bash-string
    - include: expansion-parameter
    # no brace expansion
    - include: expansion-arithmetic
    - include: expansion-command
    - include: expansion-tilde
    # no pattern expansion
    - include: any-escape

  array:
    - match: \[
      scope: punctuation.section.braces.begin.shell
      push:
        - match: \]
          scope: punctuation.section.braces.end.shell
          pop: true
        - match: '[*@]'
          scope: variable.language.array.shell
        - include: expression

  expansion-parameter-post-first-character:
    - meta_content_scope:
        meta.group.expansion.parameter.shell
        variable.other.readwrite.shell
    - include: expansion-parameter-common
    - match: (?=[@*]?/)
      set:
        - meta_content_scope: meta.group.expansion.parameter.shell
        - match: ([@*])?(/)
          captures:
            1: variable.language.shell
            2: keyword.operator.substitution.shell
          set:
            - meta_include_prototype: false
            - meta_content_scope: meta.group.expansion.parameter.shell
            - match: '[/#%]'
              scope: variable.parameter.switch.shell
              set: expansion-parameter-pattern
            - match: ""
              set: expansion-parameter-pattern
    - match: (?=\:?[-+=?])
      set:
        - meta_content_scope: meta.group.expansion.parameter.shell
        - match: \:?[-+=?]
          scope: keyword.operator.assignment.shell
          set: expansion-parameter-common
    - match: (?=@?:)
      set:
        - meta_content_scope: meta.group.expansion.parameter.shell
        - match: '(@)?(:)'
          captures:
            1: variable.language.shell
            2: keyword.operator.substring.begin.shell
          set:
            - meta_content_scope: meta.group.expansion.parameter.shell
            - match: (?=:)
              set:
                - meta_content_scope: meta.group.expansion.parameter.shell
                - match: ":"
                  scope: keyword.operator.substring.end.shell
                  set:
                    - meta_content_scope: meta.group.expansion.parameter.shell
                    - include: expression
                    - include: expansion-parameter-common
            - include: expression
            - include: expansion-parameter-common
    - match: \#(?=})
    - match: ([@*])?(\#\#?|%%?|\^\^?|,,?)
      captures:
        1: variable.language.shell
        2: keyword.operator.expansion.shell
      set:
        - meta_include_prototype: false
        - meta_content_scope: meta.group.expansion.parameter.shell
        - include: expansion-parameter-common
        - include: expansion-pattern
    - match: ([@*]?)(@)([QEPAa])(?=})
      captures:
        1: variable.language.shell
        2: keyword.operator.expansion.shell
        3: variable.parameter.switch.shell
    - include: array
    - match: '[*@](?=})'
      scope: variable.language.shell

  expansion-parameter-pattern:
    - meta_content_scope: meta.group.expansion.parameter.shell
    - match: /
      scope: keyword.operator.substitution.shell
      set: expansion-parameter-common
    - include: expansion-parameter-common
    - include: expansion-pattern

  expansion-job:
    # There are a number of ways to refer to a job in the shell.
    # The symbols ‘%%’ and ‘%+’ refer to the shell’s notion of the current job,
    # which is the last job stopped while it was in the foreground or started in
    # the background. The previous job may be referenced using ‘%-’.
    - match: (%)([%+-])
      captures:
        0: meta.group.expansion.job.shell
        1: punctuation.definition.variable.job.shell
        2: variable.language.job.shell
    # The character ‘%’ introduces a job specification (jobspec). Job number n
    # may be referred to as ‘%n’.
    - match: (%)(\d+)
      captures:
        0: meta.group.expansion.job.shell
        1: punctuation.definition.variable.job.shell
        2: constant.numeric.integer.decimal.job.shell
    # A job may also be referred to using a prefix of the name used to start it,
    # or using a substring that appears in its command line. For example, ‘%ce’
    # refers to a stopped ce job. Using ‘%?ce’, on the other hand, refers to any
    # job containing the string ‘ce’ in its command line. If the prefix or
    # substring matches more than one job, Bash reports an error.
    - match: (%)(\??)(\w+)
      captures:
        0: meta.group.expansion.job.shell
        1: punctuation.definition.variable.job.shell
        2: keyword.operator.regexp.quantifier.shell
        3: variable.other.readwrite.shell
    # A single ‘%’ (with no accompanying job specification) also refers to the
    # current job.
    - match: '%'
      scope:
        meta.group.expansion.job.shell
        punctuation.definition.variable.job.shell


  expression:
    # A leading ‘0x’ or ‘0X’ denotes hexadecimal.
    - match: \b(?i)0x
      scope: punctuation.definition.numeric.hexadecimal.shell
      push:
        - meta_scope: constant.numeric.integer.hexadecimal.shell
        - match: '[g-zG-Z]'
          scope: invalid.illegal.not-a-hex-character.shell
          pop: true
        - match: (?=\H)
          pop: true
    # Constants with a leading 0 are interpreted as octal numbers.
    - match: \b0(?=[0-7])
      scope: punctuation.definition.numeric.octal.shell
      push:
        - meta_scope: constant.numeric.integer.octal.shell
        - match: '[89]'
          scope: invalid.illegal.not-an-octal-character.shell
          pop: true
        - match: (?=[^0-7])
          pop: true
    # Otherwise, numbers take the form [base#]n, where the optional base is a
    # decimal number between 2 and 64 representing the arithmetic base, and n is
    # a number in that base. When specifying n, the digits greater than 9 are
    # represented by the lowercase letters, the uppercase letters, ‘@’, and ‘_’,
    # in that order.
    - match: \b(\d+)(#)([a-zA-Z0-9@_]+)
      captures:
        1: constant.numeric.integer.decimal.base.shell
        2: punctuation.definition.numeric.base.shell
        3: constant.numeric.integer.generic-base.shell
    # If base# is omitted, then base 10 is used.
    - match: \b\d+
      scope: constant.numeric.integer.decimal.shell
    - match: '[*/%+\-&^|]?=|<<=|>>='
      scope: keyword.operator.assignment.shell
    - match: \+\+?|\-\-?|\*\*?|%|/
      scope: keyword.operator.arithmetic.shell
    - match: <[=<]?|>[=>]?|[=!]=|&&|\:|\|\||!
      scope: keyword.operator.logical.shell
    - match: '[&|^~]'
      scope: keyword.operator.bitwise.shell
    - match: '[,;]'
      scope: punctuation.separator.shell
    - match: \?
      scope: keyword.operator.ternary.shell
    - match: \(
      scope: punctuation.section.parens.begin.shell
      push:
        - meta_scope: meta.group.parens.shell
        - match: \)
          scope: punctuation.section.parens.end.shell
          pop: true
        - include: expression
    # Shell variables are allowed as operands; parameter expansion is performed
    # before the expression is evaluated. Within an expression, shell variables
    # may also be referenced by name without using the parameter expansion
    # syntax.
    - include: bash-string
    - include: expansion-parameter
    - include: expansion-arithmetic
    - include: expansion-command

  expression-test:
    - include: expansion-and-string
    - match: ((-)[aobcdefghknoprstuvwxzGLNORS])(?=\s)
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: ((-)(?:ef|nt|ot|eq|ne|lt|le|gt|ge))(?=\s)
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: (=~)\s*
      captures:
        1: keyword.operator.logical.shell
      push:
        - meta_content_scope: meta.regexp.shell
        - match: (?=\s)
          pop: true
        - include: expansion-and-string
    - match: ==?|!=?|<|>|\|\||&&
      scope: keyword.operator.logical.shell

  bash-string:
    - include: bash-string-quoted-double
    - include: bash-string-quoted-single
    - include: string-ansi-c
    - include: string-locale

  # nothing is escaped in a singly-quoted string!
  bash-string-quoted-single:
    - match: \'
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.shell
        - match: \'
          scope: punctuation.definition.string.end.shell
          pop: true

  bash-string-quoted-double:
    - match: \"
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.shell
        - include: string-quoted-double-common

  string-quoted-double-escape-character:
    - match: \\[$`"\\]
      scope: constant.character.escape.shell
    - match: \\\n
      scope: constant.character.escape.shell
      push:
        - meta_include_prototype: false
        - match: (?=\S)
          pop: true

  # [Bash] 3.1.2.4
  string-ansi-c:
    - match: \$'
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.ansi-c.shell
        - match: "'"
          scope: punctuation.definition.string.end.shell
          pop: true
        - include: string-quoted-double-escape-character
        - match: \\([abfnrtv'"?]|[0-8]{1,3}|x\h{1,8}|c[a-z])
          scope: constant.character.escape.shell

  # [Bash] 3.1.2.5
  # If the string is translated and replaced, the replacement is double-quoted.
  string-locale:
    - match: \$"
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.locale.shell
        - include: string-quoted-double-common

  string-quoted-double-common:
    - match: \"
      scope: punctuation.definition.string.end.shell
      pop: true
    - include: string-quoted-double-escape-character
    - include: expansion-parameter
    - include: expansion-arithmetic
    - include: expansion-command